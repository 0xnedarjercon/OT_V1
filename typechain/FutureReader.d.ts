/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface FutureReaderInterface extends ethers.utils.Interface {
  functions: {
    "bulkTokenInfo(address[])": FunctionFragment;
    "bulkValidateLiquidate(address[],address[],address[],bool[])": FunctionFragment;
    "collateralTokens(uint256)": FunctionFragment;
    "future()": FunctionFragment;
    "getPairs()": FunctionFragment;
    "getPairs2()": FunctionFragment;
    "getPositionList(address)": FunctionFragment;
    "getPositionList2(address)": FunctionFragment;
    "indexTokens(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pairCount()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setPairs(address[],address[])": FunctionFragment;
    "setVirtualTokens()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "virtualTokenList(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "bulkTokenInfo",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkValidateLiquidate",
    values: [string[], string[], string[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "future", values?: undefined): string;
  encodeFunctionData(functionFragment: "getPairs", values?: undefined): string;
  encodeFunctionData(functionFragment: "getPairs2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPositionList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionList2",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "indexTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pairCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPairs",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setVirtualTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "virtualTokenList",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "bulkTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkValidateLiquidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "future", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPairs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPairs2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPositionList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionList2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "indexTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pairCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPairs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setVirtualTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "virtualTokenList",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class FutureReader extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FutureReaderInterface;

  functions: {
    bulkTokenInfo(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<
      [number[], string[], string[]] & {
        decimals: number[];
        names: string[];
        symbols: string[];
      }
    >;

    bulkValidateLiquidate(
      _collTokens: string[],
      _indexTokens: string[],
      _accounts: string[],
      _isLongs: boolean[],
      overrides?: CallOverrides
    ): Promise<[boolean[]] & { shouldLiquidates: boolean[] }>;

    collateralTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    future(overrides?: CallOverrides): Promise<[string]>;

    getPairs(
      overrides?: CallOverrides
    ): Promise<
      [
        string[],
        string[],
        BigNumber[],
        BigNumber[],
        BigNumber[],
        BigNumber[],
        BigNumber[],
        BigNumber[]
      ] & {
        collTokens: string[];
        idxTokens: string[];
        tradingFeeRates: BigNumber[];
        maxLeverages: BigNumber[];
        longFundingRates: BigNumber[];
        shortFundingRates: BigNumber[];
        cumulativeLongFundingRates: BigNumber[];
        cumulativeShortFundingRates: BigNumber[];
      }
    >;

    getPairs2(
      overrides?: CallOverrides
    ): Promise<
      [string[], string[], BigNumber[]] & {
        collTokens: string[];
        idxTokens: string[];
        dataList: BigNumber[];
      }
    >;

    getPositionList(
      _account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string[],
        string[],
        boolean[],
        BigNumber[],
        BigNumber[],
        BigNumber[],
        BigNumber[]
      ] & {
        collateralTokenList: string[];
        indexTokenList: string[];
        isLongList: boolean[];
        marginList: BigNumber[];
        openNotionalList: BigNumber[];
        sizeList: BigNumber[];
        entryFundingRateList: BigNumber[];
      }
    >;

    getPositionList2(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], string[], boolean[], BigNumber[]] & {
        collateralTokenList: string[];
        indexTokenList: string[];
        isLongList: boolean[];
        dataList: BigNumber[];
      }
    >;

    indexTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pairCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPairs(
      _collateralTokens: string[],
      _indexTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVirtualTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    virtualTokenList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string] & {
        decimal: number;
        name: string;
        symbol: string;
      }
    >;
  };

  bulkTokenInfo(
    tokens: string[],
    overrides?: CallOverrides
  ): Promise<
    [number[], string[], string[]] & {
      decimals: number[];
      names: string[];
      symbols: string[];
    }
  >;

  bulkValidateLiquidate(
    _collTokens: string[],
    _indexTokens: string[],
    _accounts: string[],
    _isLongs: boolean[],
    overrides?: CallOverrides
  ): Promise<boolean[]>;

  collateralTokens(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  future(overrides?: CallOverrides): Promise<string>;

  getPairs(
    overrides?: CallOverrides
  ): Promise<
    [
      string[],
      string[],
      BigNumber[],
      BigNumber[],
      BigNumber[],
      BigNumber[],
      BigNumber[],
      BigNumber[]
    ] & {
      collTokens: string[];
      idxTokens: string[];
      tradingFeeRates: BigNumber[];
      maxLeverages: BigNumber[];
      longFundingRates: BigNumber[];
      shortFundingRates: BigNumber[];
      cumulativeLongFundingRates: BigNumber[];
      cumulativeShortFundingRates: BigNumber[];
    }
  >;

  getPairs2(
    overrides?: CallOverrides
  ): Promise<
    [string[], string[], BigNumber[]] & {
      collTokens: string[];
      idxTokens: string[];
      dataList: BigNumber[];
    }
  >;

  getPositionList(
    _account: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string[],
      string[],
      boolean[],
      BigNumber[],
      BigNumber[],
      BigNumber[],
      BigNumber[]
    ] & {
      collateralTokenList: string[];
      indexTokenList: string[];
      isLongList: boolean[];
      marginList: BigNumber[];
      openNotionalList: BigNumber[];
      sizeList: BigNumber[];
      entryFundingRateList: BigNumber[];
    }
  >;

  getPositionList2(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [string[], string[], boolean[], BigNumber[]] & {
      collateralTokenList: string[];
      indexTokenList: string[];
      isLongList: boolean[];
      dataList: BigNumber[];
    }
  >;

  indexTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pairCount(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPairs(
    _collateralTokens: string[],
    _indexTokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVirtualTokens(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  virtualTokenList(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [number, string, string] & { decimal: number; name: string; symbol: string }
  >;

  callStatic: {
    bulkTokenInfo(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<
      [number[], string[], string[]] & {
        decimals: number[];
        names: string[];
        symbols: string[];
      }
    >;

    bulkValidateLiquidate(
      _collTokens: string[],
      _indexTokens: string[],
      _accounts: string[],
      _isLongs: boolean[],
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    collateralTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    future(overrides?: CallOverrides): Promise<string>;

    getPairs(
      overrides?: CallOverrides
    ): Promise<
      [
        string[],
        string[],
        BigNumber[],
        BigNumber[],
        BigNumber[],
        BigNumber[],
        BigNumber[],
        BigNumber[]
      ] & {
        collTokens: string[];
        idxTokens: string[];
        tradingFeeRates: BigNumber[];
        maxLeverages: BigNumber[];
        longFundingRates: BigNumber[];
        shortFundingRates: BigNumber[];
        cumulativeLongFundingRates: BigNumber[];
        cumulativeShortFundingRates: BigNumber[];
      }
    >;

    getPairs2(
      overrides?: CallOverrides
    ): Promise<
      [string[], string[], BigNumber[]] & {
        collTokens: string[];
        idxTokens: string[];
        dataList: BigNumber[];
      }
    >;

    getPositionList(
      _account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string[],
        string[],
        boolean[],
        BigNumber[],
        BigNumber[],
        BigNumber[],
        BigNumber[]
      ] & {
        collateralTokenList: string[];
        indexTokenList: string[];
        isLongList: boolean[];
        marginList: BigNumber[];
        openNotionalList: BigNumber[];
        sizeList: BigNumber[];
        entryFundingRateList: BigNumber[];
      }
    >;

    getPositionList2(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], string[], boolean[], BigNumber[]] & {
        collateralTokenList: string[];
        indexTokenList: string[];
        isLongList: boolean[];
        dataList: BigNumber[];
      }
    >;

    indexTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pairCount(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setPairs(
      _collateralTokens: string[],
      _indexTokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setVirtualTokens(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    virtualTokenList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string] & {
        decimal: number;
        name: string;
        symbol: string;
      }
    >;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    bulkTokenInfo(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkValidateLiquidate(
      _collTokens: string[],
      _indexTokens: string[],
      _accounts: string[],
      _isLongs: boolean[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    future(overrides?: CallOverrides): Promise<BigNumber>;

    getPairs(overrides?: CallOverrides): Promise<BigNumber>;

    getPairs2(overrides?: CallOverrides): Promise<BigNumber>;

    getPositionList(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionList2(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    indexTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pairCount(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPairs(
      _collateralTokens: string[],
      _indexTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVirtualTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    virtualTokenList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bulkTokenInfo(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkValidateLiquidate(
      _collTokens: string[],
      _indexTokens: string[],
      _accounts: string[],
      _isLongs: boolean[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    future(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPairs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPairs2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPositionList(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionList2(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    indexTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPairs(
      _collateralTokens: string[],
      _indexTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVirtualTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    virtualTokenList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
