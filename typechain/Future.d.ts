/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface FutureInterface extends ethers.utils.Interface {
  functions: {
    "calcNewPosition(address,address,address,bool,uint256,uint256,bool)": FunctionFragment;
    "collateralInsuranceFunds(address)": FunctionFragment;
    "cumulativeLongFundingRates(bytes32)": FunctionFragment;
    "cumulativeShortFundingRates(bytes32)": FunctionFragment;
    "decreaseInsuranceFund(address,uint256,address)": FunctionFragment;
    "decreaseMargin(address,address,address,bool,uint256,address)": FunctionFragment;
    "decreaseMarginLegacy(address,address,address,bool,uint256,address)": FunctionFragment;
    "decreasePosition(address,address,address,bool,uint256,uint256,address)": FunctionFragment;
    "decreasePositionByRatio(address,address,address,bool,uint256,address)": FunctionFragment;
    "futurePriceFeed()": FunctionFragment;
    "futureUtil()": FunctionFragment;
    "getCumulativeFundingRate(address,address,bool)": FunctionFragment;
    "getMaintanenceMarginRatio(address,address,address,bool)": FunctionFragment;
    "getPairKey(address,address)": FunctionFragment;
    "getPairStatus(address,address)": FunctionFragment;
    "getPosition(address,address,address,bool)": FunctionFragment;
    "getPositionEntryPrice(address,address,address,bool)": FunctionFragment;
    "getPositionKey(address,address,address,bool)": FunctionFragment;
    "getPrice(address)": FunctionFragment;
    "getUtilisationRatio(address,address,int256,int256)": FunctionFragment;
    "increaseInsuranceFund(address)": FunctionFragment;
    "increaseMargin(address,address,address,bool)": FunctionFragment;
    "increasePosition(address,address,address,bool,uint256)": FunctionFragment;
    "lastFundingTimestamps(bytes32)": FunctionFragment;
    "liquidatePosition(address,address,address,bool)": FunctionFragment;
    "listPair(address,address)": FunctionFragment;
    "longFundingRates(bytes32)": FunctionFragment;
    "maxLeverages(bytes32)": FunctionFragment;
    "maxMaintanenceMarginRatios(bytes32)": FunctionFragment;
    "maxPositionUsdWithMaxLeverages(bytes32)": FunctionFragment;
    "maxTotalLongSizes(bytes32)": FunctionFragment;
    "maxTotalShortSizes(bytes32)": FunctionFragment;
    "minMaintanenceMarginRatios(bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "pairs(bytes32)": FunctionFragment;
    "positions(bytes32)": FunctionFragment;
    "protocolFeeTo()": FunctionFragment;
    "protocolUnrealizedFees(bytes32)": FunctionFragment;
    "realizePairProtocoFee(address,address)": FunctionFragment;
    "realizeProtocolFee(address[],address[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setFutureUtil(address)": FunctionFragment;
    "setMarginRatio(address,address,uint256,uint256)": FunctionFragment;
    "setMaxLeverage(address,address,uint256,uint256)": FunctionFragment;
    "setMaxTotalSize(address,address,uint256,uint256)": FunctionFragment;
    "setPairStatus(address,address,uint8)": FunctionFragment;
    "setPriceFeed(address)": FunctionFragment;
    "setProtocolFeeTo(address)": FunctionFragment;
    "setSystemRouter(address,bool)": FunctionFragment;
    "setTradingFeeRate(address,address,uint256)": FunctionFragment;
    "setUserRouter(address,bool)": FunctionFragment;
    "shortFundingRates(bytes32)": FunctionFragment;
    "systemRouters(address)": FunctionFragment;
    "token1ToToken2(address,int256,address)": FunctionFragment;
    "tokenBalances(address)": FunctionFragment;
    "tokenDecimals(address)": FunctionFragment;
    "totalLongOpenNotionals(bytes32)": FunctionFragment;
    "totalLongSizes(bytes32)": FunctionFragment;
    "totalShortOpenNotionals(bytes32)": FunctionFragment;
    "totalShortSizes(bytes32)": FunctionFragment;
    "tradingFeeRates(bytes32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userRouters(address,address)": FunctionFragment;
    "validateLiquidate(address,address,address,bool,bool)": FunctionFragment;
    "validatePosition(address,address,address,bool,bool)": FunctionFragment;
    "validateRouter(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calcNewPosition",
    values: [
      string,
      string,
      string,
      boolean,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralInsuranceFunds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "cumulativeLongFundingRates",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cumulativeShortFundingRates",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseInsuranceFund",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseMargin",
    values: [string, string, string, boolean, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseMarginLegacy",
    values: [string, string, string, boolean, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePosition",
    values: [
      string,
      string,
      string,
      boolean,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePositionByRatio",
    values: [string, string, string, boolean, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "futurePriceFeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "futureUtil",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCumulativeFundingRate",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaintanenceMarginRatio",
    values: [string, string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getPairKey",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPairStatus",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [string, string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionEntryPrice",
    values: [string, string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionKey",
    values: [string, string, string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "getPrice", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getUtilisationRatio",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseInsuranceFund",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseMargin",
    values: [string, string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "increasePosition",
    values: [string, string, string, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastFundingTimestamps",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidatePosition",
    values: [string, string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "listPair",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "longFundingRates",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxLeverages",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxMaintanenceMarginRatios",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxPositionUsdWithMaxLeverages",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxTotalLongSizes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxTotalShortSizes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "minMaintanenceMarginRatios",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pairs", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeeTo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolUnrealizedFees",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "realizePairProtocoFee",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "realizeProtocolFee",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFutureUtil",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarginRatio",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxLeverage",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTotalSize",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPairStatus",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceFeed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeeTo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSystemRouter",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTradingFeeRate",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserRouter",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "shortFundingRates",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "systemRouters",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "token1ToToken2",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenBalances",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenDecimals",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalLongOpenNotionals",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalLongSizes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalShortOpenNotionals",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalShortSizes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tradingFeeRates",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userRouters",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "validateLiquidate",
    values: [string, string, string, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "validatePosition",
    values: [string, string, string, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "validateRouter",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "calcNewPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralInsuranceFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cumulativeLongFundingRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cumulativeShortFundingRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseInsuranceFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseMarginLegacy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasePositionByRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "futurePriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "futureUtil", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCumulativeFundingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaintanenceMarginRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPairKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPairStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionEntryPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUtilisationRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseInsuranceFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastFundingTimestamps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidatePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "longFundingRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxLeverages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxMaintanenceMarginRatios",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPositionUsdWithMaxLeverages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTotalLongSizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTotalShortSizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minMaintanenceMarginRatios",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pairs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolUnrealizedFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realizePairProtocoFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realizeProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFutureUtil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarginRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTotalSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPairStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeeTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSystemRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTradingFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shortFundingRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "systemRouters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "token1ToToken2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLongOpenNotionals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLongSizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalShortOpenNotionals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalShortSizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradingFeeRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRouters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateLiquidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateRouter",
    data: BytesLike
  ): Result;

  events: {
    "ClosePosition(bytes32,address,address,address,bool,uint256,uint256,uint256,uint256,int256,int256,uint256,uint256)": EventFragment;
    "DecreaseMargin(bytes32,address,address,address,bool,int256,int256,uint256)": EventFragment;
    "DecreaseMarginLegacy(bytes32,address,address,address,bool,uint256)": EventFragment;
    "DecreasePosition(bytes32,address,address,address,bool,uint256,uint256,uint256,uint256,int256,int256,uint256,uint256)": EventFragment;
    "IncreaseMargin(bytes32,address,address,address,bool,uint256)": EventFragment;
    "IncreasePosition(bytes32,address,address,address,bool,uint256,uint256,uint256,uint256,int256,uint256,uint256)": EventFragment;
    "LiquidatePosition(bytes32,address,address,address,bool,uint256,uint256,uint256,uint256,int256,int256,uint256,uint256)": EventFragment;
    "ListPair(bytes32,address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RealizeProtocolFee(bytes32,address,address,address,uint256)": EventFragment;
    "SetSystemRouter(address,bool)": EventFragment;
    "UpdateFundingRate(bytes32,address,address,int256,int256,int256,int256,uint256)": EventFragment;
    "UpdateInsuranceFund(address,uint256,uint256)": EventFragment;
    "UpdateMarginRatio(bytes32,address,address,uint256,uint256)": EventFragment;
    "UpdateMaxLeverage(bytes32,address,address,uint256,uint256)": EventFragment;
    "UpdateMaxTotalSize(bytes32,address,address,uint256,uint256)": EventFragment;
    "UpdatePosition(bytes32,address,address,address,bool,uint256,uint256,uint256,int256)": EventFragment;
    "UpdateTradingFeeRate(bytes32,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClosePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DecreaseMargin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DecreaseMarginLegacy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DecreasePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncreaseMargin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncreasePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidatePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ListPair"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RealizeProtocolFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetSystemRouter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateFundingRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateInsuranceFund"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMarginRatio"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMaxLeverage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMaxTotalSize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateTradingFeeRate"): EventFragment;
}

export type ClosePositionEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    positionKey: string;
    collateralToken: string;
    indexToken: string;
    account: string;
    isLong: boolean;
    marginDelta: BigNumber;
    notionalDelta: BigNumber;
    sizeDelta: BigNumber;
    tradingFee: BigNumber;
    fundingFee: BigNumber;
    pnl: BigNumber;
    collateralPrice: BigNumber;
    indexPrice: BigNumber;
  }
>;

export type DecreaseMarginEvent = TypedEvent<
  [string, string, string, string, boolean, BigNumber, BigNumber, BigNumber] & {
    positionKey: string;
    collateralToken: string;
    indexToken: string;
    account: string;
    isLong: boolean;
    pnl: BigNumber;
    fundingFee: BigNumber;
    amount: BigNumber;
  }
>;

export type DecreaseMarginLegacyEvent = TypedEvent<
  [string, string, string, string, boolean, BigNumber] & {
    positionKey: string;
    collateralToken: string;
    indexToken: string;
    account: string;
    isLong: boolean;
    amount: BigNumber;
  }
>;

export type DecreasePositionEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    positionKey: string;
    collateralToken: string;
    indexToken: string;
    account: string;
    isLong: boolean;
    marginDelta: BigNumber;
    openNotionalDelta: BigNumber;
    sizeDelta: BigNumber;
    tradingFee: BigNumber;
    fundingFee: BigNumber;
    pnl: BigNumber;
    collateralPrice: BigNumber;
    indexPrice: BigNumber;
  }
>;

export type IncreaseMarginEvent = TypedEvent<
  [string, string, string, string, boolean, BigNumber] & {
    positionKey: string;
    collateralToken: string;
    indexToken: string;
    account: string;
    isLong: boolean;
    amount: BigNumber;
  }
>;

export type IncreasePositionEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    positionKey: string;
    collateralToken: string;
    indexToken: string;
    account: string;
    isLong: boolean;
    marginDelta: BigNumber;
    openNotionalDelta: BigNumber;
    sizeDelta: BigNumber;
    tradingFee: BigNumber;
    fundingFee: BigNumber;
    collateralPrice: BigNumber;
    indexPrice: BigNumber;
  }
>;

export type LiquidatePositionEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    positionKey: string;
    collateralToken: string;
    indexToken: string;
    account: string;
    isLong: boolean;
    marginDelta: BigNumber;
    notionalDelta: BigNumber;
    sizeDelta: BigNumber;
    tradingFee: BigNumber;
    fundingFee: BigNumber;
    pnl: BigNumber;
    collateralPrice: BigNumber;
    indexPrice: BigNumber;
  }
>;

export type ListPairEvent = TypedEvent<
  [string, string, string] & {
    key: string;
    collateralToken: string;
    indexToken: string;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type RealizeProtocolFeeEvent = TypedEvent<
  [string, string, string, string, BigNumber] & {
    pairKey: string;
    _collateralToken: string;
    _indexToken: string;
    feeTo: string;
    amount: BigNumber;
  }
>;

export type SetSystemRouterEvent = TypedEvent<
  [string, boolean] & { router: string; allowed: boolean }
>;

export type UpdateFundingRateEvent = TypedEvent<
  [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    pairKey: string;
    collateralToken: string;
    indexToken: string;
    longFundingFeeRate: BigNumber;
    shortFundingFeeRate: BigNumber;
    cumulativeLongFundingRate: BigNumber;
    cumulativeShortFundingRate: BigNumber;
    timestamp: BigNumber;
  }
>;

export type UpdateInsuranceFundEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    _collateralToken: string;
    prevValue: BigNumber;
    currentValue: BigNumber;
  }
>;

export type UpdateMarginRatioEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber] & {
    pairKey: string;
    _collateralToken: string;
    _indexToken: string;
    minMaintanenceMarginRatio: BigNumber;
    maxMaintanenceMarginRatio: BigNumber;
  }
>;

export type UpdateMaxLeverageEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber] & {
    pairKey: string;
    _collateralToken: string;
    _indexToken: string;
    maxPositionUsdWithMaxLeverage: BigNumber;
    maxLeverage: BigNumber;
  }
>;

export type UpdateMaxTotalSizeEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber] & {
    pairKey: string;
    collateralToken: string;
    indexToken: string;
    maxLongSize: BigNumber;
    maxShortSize: BigNumber;
  }
>;

export type UpdatePositionEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    positionKey: string;
    collateralToken: string;
    indexToken: string;
    account: string;
    isLong: boolean;
    margin: BigNumber;
    openNotional: BigNumber;
    size: BigNumber;
    entryFundingRate: BigNumber;
  }
>;

export type UpdateTradingFeeRateEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    pairKey: string;
    _collateralToken: string;
    _indexToken: string;
    tradingFeeRate: BigNumber;
  }
>;

export class Future extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FutureInterface;

  functions: {
    calcNewPosition(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      _notionalDelta: BigNumberish,
      _sizeDelta: BigNumberish,
      _isIncreasePosition: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        fundingFee: BigNumber;
        tradingFee: BigNumber;
        pnl: BigNumber;
        remainMargin: BigNumber;
        marginRatio: BigNumber;
        openNotional: BigNumber;
      }
    >;

    collateralInsuranceFunds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cumulativeLongFundingRates(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cumulativeShortFundingRates(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decreaseInsuranceFund(
      _collateralToken: string,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decreaseMargin(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      _marginDelta: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decreaseMarginLegacy(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      _marginDelta: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decreasePosition(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      _marginDelta: BigNumberish,
      _notionalDelta: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decreasePositionByRatio(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      _notionalDelta: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    futurePriceFeed(overrides?: CallOverrides): Promise<[string]>;

    futureUtil(overrides?: CallOverrides): Promise<[string]>;

    getCumulativeFundingRate(
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMaintanenceMarginRatio(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPairKey(
      _collateralToken: string,
      _indexToken: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPairStatus(
      _collateralToken: string,
      _indexToken: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getPosition(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        margin: BigNumber;
        openNotional: BigNumber;
        size: BigNumber;
        entryFundingRate: BigNumber;
      }
    >;

    getPositionEntryPrice(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        collateralPrice: BigNumber;
        indexPrice: BigNumber;
      }
    >;

    getPositionKey(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPrice(_token: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getUtilisationRatio(
      _collateralToken: string,
      _indexToken: string,
      _longSizeDelta: BigNumberish,
      _shortSizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    increaseInsuranceFund(
      _collateralToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseMargin(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increasePosition(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      _notionalDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastFundingTimestamps(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    liquidatePosition(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    listPair(
      _collateralToken: string,
      _indexToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    longFundingRates(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxLeverages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxMaintanenceMarginRatios(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxPositionUsdWithMaxLeverages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxTotalLongSizes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxTotalShortSizes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minMaintanenceMarginRatios(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pairs(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, BigNumber, BigNumber] & {
        collateralToken: string;
        indexToken: string;
        status: number;
        unlistCollateralPrice: BigNumber;
        unlistIndexPrice: BigNumber;
      }
    >;

    positions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        margin: BigNumber;
        openNotional: BigNumber;
        size: BigNumber;
        entryFundingRate: BigNumber;
        entryCollateralPrice: BigNumber;
        entryIndexPrice: BigNumber;
      }
    >;

    protocolFeeTo(overrides?: CallOverrides): Promise<[string]>;

    protocolUnrealizedFees(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    realizePairProtocoFee(
      collateralToken: string,
      indexToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    realizeProtocolFee(
      collateralTokens: string[],
      indexTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFutureUtil(
      _futureUtil: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMarginRatio(
      _collateralToken: string,
      _indexToken: string,
      _minMaintanenceMarginRatio: BigNumberish,
      _maxMaintanenceMarginRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxLeverage(
      _collateralToken: string,
      _indexToken: string,
      maxPositionUsdWithMaxLeverage: BigNumberish,
      maxLeverage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxTotalSize(
      _collateralToken: string,
      _indexToken: string,
      _maxLongSize: BigNumberish,
      _maxShortSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPairStatus(
      _collateralToken: string,
      _indexToken: string,
      _status: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPriceFeed(
      _priceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProtocolFeeTo(
      _feeto: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSystemRouter(
      _router: string,
      allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTradingFeeRate(
      _collateralToken: string,
      _indexToken: string,
      tradingFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUserRouter(
      _router: string,
      allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shortFundingRates(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    systemRouters(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    token1ToToken2(
      token1: string,
      token1Amount: BigNumberish,
      token2: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenDecimals(arg0: string, overrides?: CallOverrides): Promise<[number]>;

    totalLongOpenNotionals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalLongSizes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalShortOpenNotionals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalShortSizes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tradingFeeRates(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userRouters(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    validateLiquidate(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      _raise: boolean,
      overrides?: CallOverrides
    ): Promise<[boolean] & { shouldLiquidate: boolean }>;

    validatePosition(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      _raise: boolean,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isRevert: boolean }>;

    validateRouter(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  calcNewPosition(
    _collateralToken: string,
    _indexToken: string,
    _account: string,
    _isLong: boolean,
    _notionalDelta: BigNumberish,
    _sizeDelta: BigNumberish,
    _isIncreasePosition: boolean,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      fundingFee: BigNumber;
      tradingFee: BigNumber;
      pnl: BigNumber;
      remainMargin: BigNumber;
      marginRatio: BigNumber;
      openNotional: BigNumber;
    }
  >;

  collateralInsuranceFunds(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cumulativeLongFundingRates(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cumulativeShortFundingRates(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decreaseInsuranceFund(
    _collateralToken: string,
    _amount: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decreaseMargin(
    _collateralToken: string,
    _indexToken: string,
    _account: string,
    _isLong: boolean,
    _marginDelta: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decreaseMarginLegacy(
    _collateralToken: string,
    _indexToken: string,
    _account: string,
    _isLong: boolean,
    _marginDelta: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decreasePosition(
    _collateralToken: string,
    _indexToken: string,
    _account: string,
    _isLong: boolean,
    _marginDelta: BigNumberish,
    _notionalDelta: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decreasePositionByRatio(
    _collateralToken: string,
    _indexToken: string,
    _account: string,
    _isLong: boolean,
    _notionalDelta: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  futurePriceFeed(overrides?: CallOverrides): Promise<string>;

  futureUtil(overrides?: CallOverrides): Promise<string>;

  getCumulativeFundingRate(
    _collateralToken: string,
    _indexToken: string,
    _isLong: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMaintanenceMarginRatio(
    _collateralToken: string,
    _indexToken: string,
    _account: string,
    _isLong: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPairKey(
    _collateralToken: string,
    _indexToken: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getPairStatus(
    _collateralToken: string,
    _indexToken: string,
    overrides?: CallOverrides
  ): Promise<number>;

  getPosition(
    _collateralToken: string,
    _indexToken: string,
    _account: string,
    _isLong: boolean,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      margin: BigNumber;
      openNotional: BigNumber;
      size: BigNumber;
      entryFundingRate: BigNumber;
    }
  >;

  getPositionEntryPrice(
    _collateralToken: string,
    _indexToken: string,
    _account: string,
    _isLong: boolean,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      collateralPrice: BigNumber;
      indexPrice: BigNumber;
    }
  >;

  getPositionKey(
    _collateralToken: string,
    _indexToken: string,
    _account: string,
    _isLong: boolean,
    overrides?: CallOverrides
  ): Promise<string>;

  getPrice(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

  getUtilisationRatio(
    _collateralToken: string,
    _indexToken: string,
    _longSizeDelta: BigNumberish,
    _shortSizeDelta: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  increaseInsuranceFund(
    _collateralToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseMargin(
    _collateralToken: string,
    _indexToken: string,
    _account: string,
    _isLong: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increasePosition(
    _collateralToken: string,
    _indexToken: string,
    _account: string,
    _isLong: boolean,
    _notionalDelta: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastFundingTimestamps(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  liquidatePosition(
    _collateralToken: string,
    _indexToken: string,
    _account: string,
    _isLong: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  listPair(
    _collateralToken: string,
    _indexToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  longFundingRates(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxLeverages(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  maxMaintanenceMarginRatios(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxPositionUsdWithMaxLeverages(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxTotalLongSizes(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxTotalShortSizes(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minMaintanenceMarginRatios(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pairs(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, number, BigNumber, BigNumber] & {
      collateralToken: string;
      indexToken: string;
      status: number;
      unlistCollateralPrice: BigNumber;
      unlistIndexPrice: BigNumber;
    }
  >;

  positions(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      margin: BigNumber;
      openNotional: BigNumber;
      size: BigNumber;
      entryFundingRate: BigNumber;
      entryCollateralPrice: BigNumber;
      entryIndexPrice: BigNumber;
    }
  >;

  protocolFeeTo(overrides?: CallOverrides): Promise<string>;

  protocolUnrealizedFees(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  realizePairProtocoFee(
    collateralToken: string,
    indexToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  realizeProtocolFee(
    collateralTokens: string[],
    indexTokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFutureUtil(
    _futureUtil: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMarginRatio(
    _collateralToken: string,
    _indexToken: string,
    _minMaintanenceMarginRatio: BigNumberish,
    _maxMaintanenceMarginRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxLeverage(
    _collateralToken: string,
    _indexToken: string,
    maxPositionUsdWithMaxLeverage: BigNumberish,
    maxLeverage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxTotalSize(
    _collateralToken: string,
    _indexToken: string,
    _maxLongSize: BigNumberish,
    _maxShortSize: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPairStatus(
    _collateralToken: string,
    _indexToken: string,
    _status: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPriceFeed(
    _priceFeed: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProtocolFeeTo(
    _feeto: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSystemRouter(
    _router: string,
    allowed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTradingFeeRate(
    _collateralToken: string,
    _indexToken: string,
    tradingFeeRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUserRouter(
    _router: string,
    allowed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shortFundingRates(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  systemRouters(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  token1ToToken2(
    token1: string,
    token1Amount: BigNumberish,
    token2: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  tokenDecimals(arg0: string, overrides?: CallOverrides): Promise<number>;

  totalLongOpenNotionals(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalLongSizes(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalShortOpenNotionals(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalShortSizes(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tradingFeeRates(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userRouters(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  validateLiquidate(
    _collateralToken: string,
    _indexToken: string,
    _account: string,
    _isLong: boolean,
    _raise: boolean,
    overrides?: CallOverrides
  ): Promise<boolean>;

  validatePosition(
    _collateralToken: string,
    _indexToken: string,
    _account: string,
    _isLong: boolean,
    _raise: boolean,
    overrides?: CallOverrides
  ): Promise<boolean>;

  validateRouter(_account: string, overrides?: CallOverrides): Promise<void>;

  callStatic: {
    calcNewPosition(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      _notionalDelta: BigNumberish,
      _sizeDelta: BigNumberish,
      _isIncreasePosition: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        fundingFee: BigNumber;
        tradingFee: BigNumber;
        pnl: BigNumber;
        remainMargin: BigNumber;
        marginRatio: BigNumber;
        openNotional: BigNumber;
      }
    >;

    collateralInsuranceFunds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cumulativeLongFundingRates(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cumulativeShortFundingRates(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreaseInsuranceFund(
      _collateralToken: string,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    decreaseMargin(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      _marginDelta: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    decreaseMarginLegacy(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      _marginDelta: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    decreasePosition(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      _marginDelta: BigNumberish,
      _notionalDelta: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreasePositionByRatio(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      _notionalDelta: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    futurePriceFeed(overrides?: CallOverrides): Promise<string>;

    futureUtil(overrides?: CallOverrides): Promise<string>;

    getCumulativeFundingRate(
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaintanenceMarginRatio(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPairKey(
      _collateralToken: string,
      _indexToken: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getPairStatus(
      _collateralToken: string,
      _indexToken: string,
      overrides?: CallOverrides
    ): Promise<number>;

    getPosition(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        margin: BigNumber;
        openNotional: BigNumber;
        size: BigNumber;
        entryFundingRate: BigNumber;
      }
    >;

    getPositionEntryPrice(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        collateralPrice: BigNumber;
        indexPrice: BigNumber;
      }
    >;

    getPositionKey(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    getPrice(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    getUtilisationRatio(
      _collateralToken: string,
      _indexToken: string,
      _longSizeDelta: BigNumberish,
      _shortSizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseInsuranceFund(
      _collateralToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseMargin(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    increasePosition(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      _notionalDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lastFundingTimestamps(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidatePosition(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    listPair(
      _collateralToken: string,
      _indexToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    longFundingRates(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxLeverages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxMaintanenceMarginRatios(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxPositionUsdWithMaxLeverages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxTotalLongSizes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxTotalShortSizes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minMaintanenceMarginRatios(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pairs(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, BigNumber, BigNumber] & {
        collateralToken: string;
        indexToken: string;
        status: number;
        unlistCollateralPrice: BigNumber;
        unlistIndexPrice: BigNumber;
      }
    >;

    positions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        margin: BigNumber;
        openNotional: BigNumber;
        size: BigNumber;
        entryFundingRate: BigNumber;
        entryCollateralPrice: BigNumber;
        entryIndexPrice: BigNumber;
      }
    >;

    protocolFeeTo(overrides?: CallOverrides): Promise<string>;

    protocolUnrealizedFees(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    realizePairProtocoFee(
      collateralToken: string,
      indexToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    realizeProtocolFee(
      collateralTokens: string[],
      indexTokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setFutureUtil(
      _futureUtil: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarginRatio(
      _collateralToken: string,
      _indexToken: string,
      _minMaintanenceMarginRatio: BigNumberish,
      _maxMaintanenceMarginRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxLeverage(
      _collateralToken: string,
      _indexToken: string,
      maxPositionUsdWithMaxLeverage: BigNumberish,
      maxLeverage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxTotalSize(
      _collateralToken: string,
      _indexToken: string,
      _maxLongSize: BigNumberish,
      _maxShortSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPairStatus(
      _collateralToken: string,
      _indexToken: string,
      _status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceFeed(_priceFeed: string, overrides?: CallOverrides): Promise<void>;

    setProtocolFeeTo(_feeto: string, overrides?: CallOverrides): Promise<void>;

    setSystemRouter(
      _router: string,
      allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setTradingFeeRate(
      _collateralToken: string,
      _indexToken: string,
      tradingFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setUserRouter(
      _router: string,
      allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    shortFundingRates(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    systemRouters(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    token1ToToken2(
      token1: string,
      token1Amount: BigNumberish,
      token2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    tokenDecimals(arg0: string, overrides?: CallOverrides): Promise<number>;

    totalLongOpenNotionals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalLongSizes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalShortOpenNotionals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalShortSizes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tradingFeeRates(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userRouters(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    validateLiquidate(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      _raise: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    validatePosition(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      _raise: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    validateRouter(_account: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "ClosePosition(bytes32,address,address,address,bool,uint256,uint256,uint256,uint256,int256,int256,uint256,uint256)"(
      positionKey?: BytesLike | null,
      collateralToken?: null,
      indexToken?: null,
      account?: null,
      isLong?: null,
      marginDelta?: null,
      notionalDelta?: null,
      sizeDelta?: null,
      tradingFee?: null,
      fundingFee?: null,
      pnl?: null,
      collateralPrice?: null,
      indexPrice?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        positionKey: string;
        collateralToken: string;
        indexToken: string;
        account: string;
        isLong: boolean;
        marginDelta: BigNumber;
        notionalDelta: BigNumber;
        sizeDelta: BigNumber;
        tradingFee: BigNumber;
        fundingFee: BigNumber;
        pnl: BigNumber;
        collateralPrice: BigNumber;
        indexPrice: BigNumber;
      }
    >;

    ClosePosition(
      positionKey?: BytesLike | null,
      collateralToken?: null,
      indexToken?: null,
      account?: null,
      isLong?: null,
      marginDelta?: null,
      notionalDelta?: null,
      sizeDelta?: null,
      tradingFee?: null,
      fundingFee?: null,
      pnl?: null,
      collateralPrice?: null,
      indexPrice?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        positionKey: string;
        collateralToken: string;
        indexToken: string;
        account: string;
        isLong: boolean;
        marginDelta: BigNumber;
        notionalDelta: BigNumber;
        sizeDelta: BigNumber;
        tradingFee: BigNumber;
        fundingFee: BigNumber;
        pnl: BigNumber;
        collateralPrice: BigNumber;
        indexPrice: BigNumber;
      }
    >;

    "DecreaseMargin(bytes32,address,address,address,bool,int256,int256,uint256)"(
      positionKey?: BytesLike | null,
      collateralToken?: null,
      indexToken?: null,
      account?: null,
      isLong?: null,
      pnl?: null,
      fundingFee?: null,
      amount?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        positionKey: string;
        collateralToken: string;
        indexToken: string;
        account: string;
        isLong: boolean;
        pnl: BigNumber;
        fundingFee: BigNumber;
        amount: BigNumber;
      }
    >;

    DecreaseMargin(
      positionKey?: BytesLike | null,
      collateralToken?: null,
      indexToken?: null,
      account?: null,
      isLong?: null,
      pnl?: null,
      fundingFee?: null,
      amount?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        positionKey: string;
        collateralToken: string;
        indexToken: string;
        account: string;
        isLong: boolean;
        pnl: BigNumber;
        fundingFee: BigNumber;
        amount: BigNumber;
      }
    >;

    "DecreaseMarginLegacy(bytes32,address,address,address,bool,uint256)"(
      positionKey?: BytesLike | null,
      collateralToken?: null,
      indexToken?: null,
      account?: null,
      isLong?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, string, boolean, BigNumber],
      {
        positionKey: string;
        collateralToken: string;
        indexToken: string;
        account: string;
        isLong: boolean;
        amount: BigNumber;
      }
    >;

    DecreaseMarginLegacy(
      positionKey?: BytesLike | null,
      collateralToken?: null,
      indexToken?: null,
      account?: null,
      isLong?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, string, boolean, BigNumber],
      {
        positionKey: string;
        collateralToken: string;
        indexToken: string;
        account: string;
        isLong: boolean;
        amount: BigNumber;
      }
    >;

    "DecreasePosition(bytes32,address,address,address,bool,uint256,uint256,uint256,uint256,int256,int256,uint256,uint256)"(
      positionKey?: BytesLike | null,
      collateralToken?: null,
      indexToken?: null,
      account?: null,
      isLong?: null,
      marginDelta?: null,
      openNotionalDelta?: null,
      sizeDelta?: null,
      tradingFee?: null,
      fundingFee?: null,
      pnl?: null,
      collateralPrice?: null,
      indexPrice?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        positionKey: string;
        collateralToken: string;
        indexToken: string;
        account: string;
        isLong: boolean;
        marginDelta: BigNumber;
        openNotionalDelta: BigNumber;
        sizeDelta: BigNumber;
        tradingFee: BigNumber;
        fundingFee: BigNumber;
        pnl: BigNumber;
        collateralPrice: BigNumber;
        indexPrice: BigNumber;
      }
    >;

    DecreasePosition(
      positionKey?: BytesLike | null,
      collateralToken?: null,
      indexToken?: null,
      account?: null,
      isLong?: null,
      marginDelta?: null,
      openNotionalDelta?: null,
      sizeDelta?: null,
      tradingFee?: null,
      fundingFee?: null,
      pnl?: null,
      collateralPrice?: null,
      indexPrice?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        positionKey: string;
        collateralToken: string;
        indexToken: string;
        account: string;
        isLong: boolean;
        marginDelta: BigNumber;
        openNotionalDelta: BigNumber;
        sizeDelta: BigNumber;
        tradingFee: BigNumber;
        fundingFee: BigNumber;
        pnl: BigNumber;
        collateralPrice: BigNumber;
        indexPrice: BigNumber;
      }
    >;

    "IncreaseMargin(bytes32,address,address,address,bool,uint256)"(
      positionKey?: BytesLike | null,
      collateralToken?: null,
      indexToken?: null,
      account?: null,
      isLong?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, string, boolean, BigNumber],
      {
        positionKey: string;
        collateralToken: string;
        indexToken: string;
        account: string;
        isLong: boolean;
        amount: BigNumber;
      }
    >;

    IncreaseMargin(
      positionKey?: BytesLike | null,
      collateralToken?: null,
      indexToken?: null,
      account?: null,
      isLong?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, string, boolean, BigNumber],
      {
        positionKey: string;
        collateralToken: string;
        indexToken: string;
        account: string;
        isLong: boolean;
        amount: BigNumber;
      }
    >;

    "IncreasePosition(bytes32,address,address,address,bool,uint256,uint256,uint256,uint256,int256,uint256,uint256)"(
      positionKey?: BytesLike | null,
      collateralToken?: null,
      indexToken?: null,
      account?: null,
      isLong?: null,
      marginDelta?: null,
      openNotionalDelta?: null,
      sizeDelta?: null,
      tradingFee?: null,
      fundingFee?: null,
      collateralPrice?: null,
      indexPrice?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        positionKey: string;
        collateralToken: string;
        indexToken: string;
        account: string;
        isLong: boolean;
        marginDelta: BigNumber;
        openNotionalDelta: BigNumber;
        sizeDelta: BigNumber;
        tradingFee: BigNumber;
        fundingFee: BigNumber;
        collateralPrice: BigNumber;
        indexPrice: BigNumber;
      }
    >;

    IncreasePosition(
      positionKey?: BytesLike | null,
      collateralToken?: null,
      indexToken?: null,
      account?: null,
      isLong?: null,
      marginDelta?: null,
      openNotionalDelta?: null,
      sizeDelta?: null,
      tradingFee?: null,
      fundingFee?: null,
      collateralPrice?: null,
      indexPrice?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        positionKey: string;
        collateralToken: string;
        indexToken: string;
        account: string;
        isLong: boolean;
        marginDelta: BigNumber;
        openNotionalDelta: BigNumber;
        sizeDelta: BigNumber;
        tradingFee: BigNumber;
        fundingFee: BigNumber;
        collateralPrice: BigNumber;
        indexPrice: BigNumber;
      }
    >;

    "LiquidatePosition(bytes32,address,address,address,bool,uint256,uint256,uint256,uint256,int256,int256,uint256,uint256)"(
      positionKey?: BytesLike | null,
      collateralToken?: null,
      indexToken?: null,
      account?: null,
      isLong?: null,
      marginDelta?: null,
      notionalDelta?: null,
      sizeDelta?: null,
      tradingFee?: null,
      fundingFee?: null,
      pnl?: null,
      collateralPrice?: null,
      indexPrice?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        positionKey: string;
        collateralToken: string;
        indexToken: string;
        account: string;
        isLong: boolean;
        marginDelta: BigNumber;
        notionalDelta: BigNumber;
        sizeDelta: BigNumber;
        tradingFee: BigNumber;
        fundingFee: BigNumber;
        pnl: BigNumber;
        collateralPrice: BigNumber;
        indexPrice: BigNumber;
      }
    >;

    LiquidatePosition(
      positionKey?: BytesLike | null,
      collateralToken?: null,
      indexToken?: null,
      account?: null,
      isLong?: null,
      marginDelta?: null,
      notionalDelta?: null,
      sizeDelta?: null,
      tradingFee?: null,
      fundingFee?: null,
      pnl?: null,
      collateralPrice?: null,
      indexPrice?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        positionKey: string;
        collateralToken: string;
        indexToken: string;
        account: string;
        isLong: boolean;
        marginDelta: BigNumber;
        notionalDelta: BigNumber;
        sizeDelta: BigNumber;
        tradingFee: BigNumber;
        fundingFee: BigNumber;
        pnl: BigNumber;
        collateralPrice: BigNumber;
        indexPrice: BigNumber;
      }
    >;

    "ListPair(bytes32,address,address)"(
      key?: BytesLike | null,
      collateralToken?: string | null,
      indexToken?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { key: string; collateralToken: string; indexToken: string }
    >;

    ListPair(
      key?: BytesLike | null,
      collateralToken?: string | null,
      indexToken?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { key: string; collateralToken: string; indexToken: string }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "RealizeProtocolFee(bytes32,address,address,address,uint256)"(
      pairKey?: BytesLike | null,
      _collateralToken?: null,
      _indexToken?: null,
      feeTo?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber],
      {
        pairKey: string;
        _collateralToken: string;
        _indexToken: string;
        feeTo: string;
        amount: BigNumber;
      }
    >;

    RealizeProtocolFee(
      pairKey?: BytesLike | null,
      _collateralToken?: null,
      _indexToken?: null,
      feeTo?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber],
      {
        pairKey: string;
        _collateralToken: string;
        _indexToken: string;
        feeTo: string;
        amount: BigNumber;
      }
    >;

    "SetSystemRouter(address,bool)"(
      router?: null,
      allowed?: null
    ): TypedEventFilter<
      [string, boolean],
      { router: string; allowed: boolean }
    >;

    SetSystemRouter(
      router?: null,
      allowed?: null
    ): TypedEventFilter<
      [string, boolean],
      { router: string; allowed: boolean }
    >;

    "UpdateFundingRate(bytes32,address,address,int256,int256,int256,int256,uint256)"(
      pairKey?: BytesLike | null,
      collateralToken?: null,
      indexToken?: null,
      longFundingFeeRate?: null,
      shortFundingFeeRate?: null,
      cumulativeLongFundingRate?: null,
      cumulativeShortFundingRate?: null,
      timestamp?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        pairKey: string;
        collateralToken: string;
        indexToken: string;
        longFundingFeeRate: BigNumber;
        shortFundingFeeRate: BigNumber;
        cumulativeLongFundingRate: BigNumber;
        cumulativeShortFundingRate: BigNumber;
        timestamp: BigNumber;
      }
    >;

    UpdateFundingRate(
      pairKey?: BytesLike | null,
      collateralToken?: null,
      indexToken?: null,
      longFundingFeeRate?: null,
      shortFundingFeeRate?: null,
      cumulativeLongFundingRate?: null,
      cumulativeShortFundingRate?: null,
      timestamp?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        pairKey: string;
        collateralToken: string;
        indexToken: string;
        longFundingFeeRate: BigNumber;
        shortFundingFeeRate: BigNumber;
        cumulativeLongFundingRate: BigNumber;
        cumulativeShortFundingRate: BigNumber;
        timestamp: BigNumber;
      }
    >;

    "UpdateInsuranceFund(address,uint256,uint256)"(
      _collateralToken?: string | null,
      prevValue?: null,
      currentValue?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        _collateralToken: string;
        prevValue: BigNumber;
        currentValue: BigNumber;
      }
    >;

    UpdateInsuranceFund(
      _collateralToken?: string | null,
      prevValue?: null,
      currentValue?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        _collateralToken: string;
        prevValue: BigNumber;
        currentValue: BigNumber;
      }
    >;

    "UpdateMarginRatio(bytes32,address,address,uint256,uint256)"(
      pairKey?: BytesLike | null,
      _collateralToken?: null,
      _indexToken?: null,
      minMaintanenceMarginRatio?: null,
      maxMaintanenceMarginRatio?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        pairKey: string;
        _collateralToken: string;
        _indexToken: string;
        minMaintanenceMarginRatio: BigNumber;
        maxMaintanenceMarginRatio: BigNumber;
      }
    >;

    UpdateMarginRatio(
      pairKey?: BytesLike | null,
      _collateralToken?: null,
      _indexToken?: null,
      minMaintanenceMarginRatio?: null,
      maxMaintanenceMarginRatio?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        pairKey: string;
        _collateralToken: string;
        _indexToken: string;
        minMaintanenceMarginRatio: BigNumber;
        maxMaintanenceMarginRatio: BigNumber;
      }
    >;

    "UpdateMaxLeverage(bytes32,address,address,uint256,uint256)"(
      pairKey?: BytesLike | null,
      _collateralToken?: null,
      _indexToken?: null,
      maxPositionUsdWithMaxLeverage?: null,
      maxLeverage?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        pairKey: string;
        _collateralToken: string;
        _indexToken: string;
        maxPositionUsdWithMaxLeverage: BigNumber;
        maxLeverage: BigNumber;
      }
    >;

    UpdateMaxLeverage(
      pairKey?: BytesLike | null,
      _collateralToken?: null,
      _indexToken?: null,
      maxPositionUsdWithMaxLeverage?: null,
      maxLeverage?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        pairKey: string;
        _collateralToken: string;
        _indexToken: string;
        maxPositionUsdWithMaxLeverage: BigNumber;
        maxLeverage: BigNumber;
      }
    >;

    "UpdateMaxTotalSize(bytes32,address,address,uint256,uint256)"(
      pairKey?: BytesLike | null,
      collateralToken?: null,
      indexToken?: null,
      maxLongSize?: null,
      maxShortSize?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        pairKey: string;
        collateralToken: string;
        indexToken: string;
        maxLongSize: BigNumber;
        maxShortSize: BigNumber;
      }
    >;

    UpdateMaxTotalSize(
      pairKey?: BytesLike | null,
      collateralToken?: null,
      indexToken?: null,
      maxLongSize?: null,
      maxShortSize?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        pairKey: string;
        collateralToken: string;
        indexToken: string;
        maxLongSize: BigNumber;
        maxShortSize: BigNumber;
      }
    >;

    "UpdatePosition(bytes32,address,address,address,bool,uint256,uint256,uint256,int256)"(
      positionKey?: BytesLike | null,
      collateralToken?: null,
      indexToken?: null,
      account?: null,
      isLong?: null,
      margin?: null,
      openNotional?: null,
      size?: null,
      entryFundingRate?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        positionKey: string;
        collateralToken: string;
        indexToken: string;
        account: string;
        isLong: boolean;
        margin: BigNumber;
        openNotional: BigNumber;
        size: BigNumber;
        entryFundingRate: BigNumber;
      }
    >;

    UpdatePosition(
      positionKey?: BytesLike | null,
      collateralToken?: null,
      indexToken?: null,
      account?: null,
      isLong?: null,
      margin?: null,
      openNotional?: null,
      size?: null,
      entryFundingRate?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        positionKey: string;
        collateralToken: string;
        indexToken: string;
        account: string;
        isLong: boolean;
        margin: BigNumber;
        openNotional: BigNumber;
        size: BigNumber;
        entryFundingRate: BigNumber;
      }
    >;

    "UpdateTradingFeeRate(bytes32,address,address,uint256)"(
      pairKey?: BytesLike | null,
      _collateralToken?: null,
      _indexToken?: null,
      tradingFeeRate?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      {
        pairKey: string;
        _collateralToken: string;
        _indexToken: string;
        tradingFeeRate: BigNumber;
      }
    >;

    UpdateTradingFeeRate(
      pairKey?: BytesLike | null,
      _collateralToken?: null,
      _indexToken?: null,
      tradingFeeRate?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      {
        pairKey: string;
        _collateralToken: string;
        _indexToken: string;
        tradingFeeRate: BigNumber;
      }
    >;
  };

  estimateGas: {
    calcNewPosition(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      _notionalDelta: BigNumberish,
      _sizeDelta: BigNumberish,
      _isIncreasePosition: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralInsuranceFunds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cumulativeLongFundingRates(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cumulativeShortFundingRates(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreaseInsuranceFund(
      _collateralToken: string,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decreaseMargin(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      _marginDelta: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decreaseMarginLegacy(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      _marginDelta: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decreasePosition(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      _marginDelta: BigNumberish,
      _notionalDelta: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decreasePositionByRatio(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      _notionalDelta: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    futurePriceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    futureUtil(overrides?: CallOverrides): Promise<BigNumber>;

    getCumulativeFundingRate(
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaintanenceMarginRatio(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPairKey(
      _collateralToken: string,
      _indexToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPairStatus(
      _collateralToken: string,
      _indexToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPosition(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionEntryPrice(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionKey(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    getUtilisationRatio(
      _collateralToken: string,
      _indexToken: string,
      _longSizeDelta: BigNumberish,
      _shortSizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseInsuranceFund(
      _collateralToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseMargin(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increasePosition(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      _notionalDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastFundingTimestamps(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidatePosition(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    listPair(
      _collateralToken: string,
      _indexToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    longFundingRates(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxLeverages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxMaintanenceMarginRatios(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxPositionUsdWithMaxLeverages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxTotalLongSizes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxTotalShortSizes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minMaintanenceMarginRatios(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pairs(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    positions(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeTo(overrides?: CallOverrides): Promise<BigNumber>;

    protocolUnrealizedFees(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    realizePairProtocoFee(
      collateralToken: string,
      indexToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    realizeProtocolFee(
      collateralTokens: string[],
      indexTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFutureUtil(
      _futureUtil: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMarginRatio(
      _collateralToken: string,
      _indexToken: string,
      _minMaintanenceMarginRatio: BigNumberish,
      _maxMaintanenceMarginRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxLeverage(
      _collateralToken: string,
      _indexToken: string,
      maxPositionUsdWithMaxLeverage: BigNumberish,
      maxLeverage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxTotalSize(
      _collateralToken: string,
      _indexToken: string,
      _maxLongSize: BigNumberish,
      _maxShortSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPairStatus(
      _collateralToken: string,
      _indexToken: string,
      _status: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPriceFeed(
      _priceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProtocolFeeTo(
      _feeto: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSystemRouter(
      _router: string,
      allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTradingFeeRate(
      _collateralToken: string,
      _indexToken: string,
      tradingFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUserRouter(
      _router: string,
      allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shortFundingRates(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    systemRouters(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    token1ToToken2(
      token1: string,
      token1Amount: BigNumberish,
      token2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    tokenDecimals(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalLongOpenNotionals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalLongSizes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalShortOpenNotionals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalShortSizes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tradingFeeRates(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userRouters(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateLiquidate(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      _raise: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validatePosition(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      _raise: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateRouter(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calcNewPosition(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      _notionalDelta: BigNumberish,
      _sizeDelta: BigNumberish,
      _isIncreasePosition: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralInsuranceFunds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cumulativeLongFundingRates(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cumulativeShortFundingRates(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decreaseInsuranceFund(
      _collateralToken: string,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decreaseMargin(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      _marginDelta: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decreaseMarginLegacy(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      _marginDelta: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decreasePosition(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      _marginDelta: BigNumberish,
      _notionalDelta: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decreasePositionByRatio(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      _notionalDelta: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    futurePriceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    futureUtil(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCumulativeFundingRate(
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaintanenceMarginRatio(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPairKey(
      _collateralToken: string,
      _indexToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPairStatus(
      _collateralToken: string,
      _indexToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPosition(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionEntryPrice(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionKey(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUtilisationRatio(
      _collateralToken: string,
      _indexToken: string,
      _longSizeDelta: BigNumberish,
      _shortSizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseInsuranceFund(
      _collateralToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseMargin(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increasePosition(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      _notionalDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastFundingTimestamps(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidatePosition(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    listPair(
      _collateralToken: string,
      _indexToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    longFundingRates(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxLeverages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxMaintanenceMarginRatios(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxPositionUsdWithMaxLeverages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxTotalLongSizes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxTotalShortSizes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minMaintanenceMarginRatios(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairs(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolFeeTo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolUnrealizedFees(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    realizePairProtocoFee(
      collateralToken: string,
      indexToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    realizeProtocolFee(
      collateralTokens: string[],
      indexTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFutureUtil(
      _futureUtil: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMarginRatio(
      _collateralToken: string,
      _indexToken: string,
      _minMaintanenceMarginRatio: BigNumberish,
      _maxMaintanenceMarginRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxLeverage(
      _collateralToken: string,
      _indexToken: string,
      maxPositionUsdWithMaxLeverage: BigNumberish,
      maxLeverage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxTotalSize(
      _collateralToken: string,
      _indexToken: string,
      _maxLongSize: BigNumberish,
      _maxShortSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPairStatus(
      _collateralToken: string,
      _indexToken: string,
      _status: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPriceFeed(
      _priceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolFeeTo(
      _feeto: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSystemRouter(
      _router: string,
      allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTradingFeeRate(
      _collateralToken: string,
      _indexToken: string,
      tradingFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUserRouter(
      _router: string,
      allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shortFundingRates(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    systemRouters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token1ToToken2(
      token1: string,
      token1Amount: BigNumberish,
      token2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenDecimals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalLongOpenNotionals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalLongSizes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalShortOpenNotionals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalShortSizes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tradingFeeRates(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userRouters(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateLiquidate(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      _raise: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validatePosition(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      _raise: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateRouter(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
