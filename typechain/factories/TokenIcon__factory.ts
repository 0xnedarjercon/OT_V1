/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TokenIcon, TokenIconInterface } from "../TokenIcon";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_assetList",
        type: "address[]",
      },
    ],
    name: "bulkTokenIcon",
    outputs: [
      {
        internalType: "string[]",
        name: "",
        type: "string[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_asset",
        type: "address",
      },
    ],
    name: "getTokenIcon",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_asset",
        type: "address",
      },
      {
        internalType: "string",
        name: "_iconUrl",
        type: "string",
      },
    ],
    name: "setTokenIcon",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6109098061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806363573f6714610067578063715018a6146100905780638331dcf91461009a5780638da5cb5b146100ba578063b0694f35146100d5578063f2fde38b146100e8575b600080fd5b61007a6100753660046104e9565b6100fb565b60405161008791906105dc565b60405180910390f35b61009861025f565b005b6100ad6100a836600461063e565b61029e565b6040516100879190610660565b6000546040516001600160a01b039091168152602001610087565b6100986100e3366004610673565b61034a565b6100986100f636600461063e565b61039b565b60606000825167ffffffffffffffff81111561011957610119610486565b60405190808252806020026020018201604052801561014c57816020015b60608152602001906001900390816101375790505b50905060005b83518110156102585760006001600086848151811061017357610173610719565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002080546101a69061072f565b80601f01602080910402602001604051908101604052809291908181526020018280546101d29061072f565b801561021f5780601f106101f45761010080835404028352916020019161021f565b820191906000526020600020905b81548152906001019060200180831161020257829003601f168201915b505050505090508083838151811061023957610239610719565b602002602001018190525050808061025090610769565b915050610152565b5092915050565b6000546001600160a01b031633146102925760405162461bcd60e51b815260040161028990610790565b60405180910390fd5b61029c6000610436565b565b6001600160a01b03811660009081526001602052604090208054606091906102c59061072f565b80601f01602080910402602001604051908101604052809291908181526020018280546102f19061072f565b801561033e5780601f106103135761010080835404028352916020019161033e565b820191906000526020600020905b81548152906001019060200180831161032157829003601f168201915b50505050509050919050565b6000546001600160a01b031633146103745760405162461bcd60e51b815260040161028990610790565b6001600160a01b03821660009081526001602052604090206103968282610813565b505050565b6000546001600160a01b031633146103c55760405162461bcd60e51b815260040161028990610790565b6001600160a01b03811661042a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610289565b61043381610436565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156104c5576104c5610486565b604052919050565b80356001600160a01b03811681146104e457600080fd5b919050565b600060208083850312156104fc57600080fd5b823567ffffffffffffffff8082111561051457600080fd5b818501915085601f83011261052857600080fd5b81358181111561053a5761053a610486565b8060051b915061054b84830161049c565b818152918301840191848101908884111561056557600080fd5b938501935b8385101561058a5761057b856104cd565b8252938501939085019061056a565b98975050505050505050565b6000815180845260005b818110156105bc576020818501810151868301820152016105a0565b506000602082860101526020601f19601f83011685010191505092915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561063157603f1988860301845261061f858351610596565b94509285019290850190600101610603565b5092979650505050505050565b60006020828403121561065057600080fd5b610659826104cd565b9392505050565b6020815260006106596020830184610596565b6000806040838503121561068657600080fd5b61068f836104cd565b915060208084013567ffffffffffffffff808211156106ad57600080fd5b818601915086601f8301126106c157600080fd5b8135818111156106d3576106d3610486565b6106e5601f8201601f1916850161049c565b915080825287848285010111156106fb57600080fd5b80848401858401376000848284010152508093505050509250929050565b634e487b7160e01b600052603260045260246000fd5b600181811c9082168061074357607f821691505b60208210810361076357634e487b7160e01b600052602260045260246000fd5b50919050565b60006001820161078957634e487b7160e01b600052601160045260246000fd5b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b601f82111561039657600081815260208120601f850160051c810160208610156107ec5750805b601f850160051c820191505b8181101561080b578281556001016107f8565b505050505050565b815167ffffffffffffffff81111561082d5761082d610486565b6108418161083b845461072f565b846107c5565b602080601f831160018114610876576000841561085e5750858301515b600019600386901b1c1916600185901b17855561080b565b600085815260208120601f198616915b828110156108a557888601518255948401946001909101908401610886565b50858210156108c35787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea26469706673582212201380785db928cfdec4be4ea7471c3acfd06eb9ca7da44197a51cc30fc8db951d64736f6c63430008110033";

export class TokenIcon__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TokenIcon> {
    return super.deploy(overrides || {}) as Promise<TokenIcon>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TokenIcon {
    return super.attach(address) as TokenIcon;
  }
  connect(signer: Signer): TokenIcon__factory {
    return super.connect(signer) as TokenIcon__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenIconInterface {
    return new utils.Interface(_abi) as TokenIconInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenIcon {
    return new Contract(address, _abi, signerOrProvider) as TokenIcon;
  }
}
