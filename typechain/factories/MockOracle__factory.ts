/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockOracle, MockOracleInterface } from "../MockOracle";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "decimals",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "getPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "prices",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "dec",
        type: "uint256",
      },
    ],
    name: "setPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610313806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80633011e16a1461005157806341976e0914610087578063cfed246b146100ac578063d449a832146100cc575b600080fd5b61008561005f366004610152565b6001600160a01b0390921660009081526020818152604080832093909355600190522055565b005b61009a610095366004610185565b6100ec565b60405190815260200160405180910390f35b61009a6100ba366004610185565b60006020819052908152604090205481565b61009a6100da366004610185565b60016020526000908152604090205481565b6001600160a01b0381166000908152602081815260408083205460019092528220546101198160126101bd565b61012490600a6102ba565b61012e90836102c6565b949350505050565b80356001600160a01b038116811461014d57600080fd5b919050565b60008060006060848603121561016757600080fd5b61017084610136565b95602085013595506040909401359392505050565b60006020828403121561019757600080fd5b6101a082610136565b9392505050565b634e487b7160e01b600052601160045260246000fd5b818103818111156101d0576101d06101a7565b92915050565b600181815b808511156102115781600019048211156101f7576101f76101a7565b8085161561020457918102915b93841c93908002906101db565b509250929050565b600082610228575060016101d0565b81610235575060006101d0565b816001811461024b576002811461025557610271565b60019150506101d0565b60ff841115610266576102666101a7565b50506001821b6101d0565b5060208310610133831016604e8410600b8410161715610294575081810a6101d0565b61029e83836101d6565b80600019048211156102b2576102b26101a7565b029392505050565b60006101a08383610219565b80820281158282048414176101d0576101d06101a756fea2646970667358221220536accb3bb26b3935a3a310e7ba7fad87a3a82b8da8798fab4c6c977f096094764736f6c63430008110033";

export class MockOracle__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockOracle> {
    return super.deploy(overrides || {}) as Promise<MockOracle>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockOracle {
    return super.attach(address) as MockOracle;
  }
  connect(signer: Signer): MockOracle__factory {
    return super.connect(signer) as MockOracle__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockOracleInterface {
    return new utils.Interface(_abi) as MockOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockOracle {
    return new Contract(address, _abi, signerOrProvider) as MockOracle;
  }
}
