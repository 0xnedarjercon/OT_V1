/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockBorrow, MockBorrowInterface } from "../MockBorrow";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "availabilities",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "debts",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "getDebt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "setDebt",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "asset",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "availability",
        type: "uint256",
      },
    ],
    name: "updateInterest",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610201806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632ecd4e7d1461005c57806332bd58b71461008f5780633764254a146100af5780639a78e72e146100db578063f83a10ca14610121575b600080fd5b61007c61006a36600461017f565b60006020819052908152604090205481565b6040519081526020015b60405180910390f35b61007c61009d36600461017f565b60016020526000908152604090205481565b6100d96100bd3660046101a1565b6001600160a01b03909116600090815260208190526040902055565b005b6101066100e936600461017f565b6001600160a01b0316600090815260208190526040812054918190565b60408051938452602084019290925290820152606001610086565b61015361012f3660046101a1565b6001600160a01b038216600090815260016020819052604090912082905592915050565b6040519015158152602001610086565b80356001600160a01b038116811461017a57600080fd5b919050565b60006020828403121561019157600080fd5b61019a82610163565b9392505050565b600080604083850312156101b457600080fd5b6101bd83610163565b94602093909301359350505056fea2646970667358221220bff68f133769a37a236dcc0b1f079b100b517435c03d915b89c70082f53157e564736f6c63430008110033";

export class MockBorrow__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockBorrow> {
    return super.deploy(overrides || {}) as Promise<MockBorrow>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockBorrow {
    return super.attach(address) as MockBorrow;
  }
  connect(signer: Signer): MockBorrow__factory {
    return super.connect(signer) as MockBorrow__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockBorrowInterface {
    return new utils.Interface(_abi) as MockBorrowInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockBorrow {
    return new Contract(address, _abi, signerOrProvider) as MockBorrow;
  }
}
