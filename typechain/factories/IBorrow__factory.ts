/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type { IBorrow, IBorrowInterface } from "../IBorrow";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_asset",
        type: "address",
      },
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "delaySeconds",
        type: "uint256",
      },
    ],
    name: "getAccountDebt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_asset",
        type: "address",
      },
    ],
    name: "getAssetsView",
    outputs: [
      {
        internalType: "uint256",
        name: "debt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "r0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "relativeInterest",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint16",
        name: "interestRate",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "base",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "optimal",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "slope1",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "slope2",
        type: "uint16",
      },
      {
        internalType: "uint8",
        name: "borrowCredit",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "collateralCredit",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "penaltyRate",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_asset",
        type: "address",
      },
    ],
    name: "getDebt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_asset",
        type: "address",
      },
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
    ],
    name: "getPositionsView",
    outputs: [
      {
        internalType: "uint256",
        name: "debt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "r0",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "collateralTokens",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "collateralAmounts",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_asset",
        type: "address",
      },
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
    ],
    name: "liquidatable",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class IBorrow__factory {
  static readonly abi = _abi;
  static createInterface(): IBorrowInterface {
    return new utils.Interface(_abi) as IBorrowInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IBorrow {
    return new Contract(address, _abi, signerOrProvider) as IBorrow;
  }
}
