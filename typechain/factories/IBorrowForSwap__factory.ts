/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  IBorrowForSwap,
  IBorrowForSwapInterface,
} from "../IBorrowForSwap";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "asset",
        type: "address",
      },
    ],
    name: "getDebt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "asset",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "availability",
        type: "uint256",
      },
    ],
    name: "updateInterest",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IBorrowForSwap__factory {
  static readonly abi = _abi;
  static createInterface(): IBorrowForSwapInterface {
    return new utils.Interface(_abi) as IBorrowForSwapInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IBorrowForSwap {
    return new Contract(address, _abi, signerOrProvider) as IBorrowForSwap;
  }
}
