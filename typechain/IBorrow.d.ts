/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IBorrowInterface extends ethers.utils.Interface {
  functions: {
    "getAccountDebt(address,address,uint256)": FunctionFragment;
    "getAssetsView(address)": FunctionFragment;
    "getDebt(address)": FunctionFragment;
    "getPositionsView(address,address)": FunctionFragment;
    "liquidatable(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getAccountDebt",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetsView",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getDebt", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getPositionsView",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidatable",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAccountDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetsView",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPositionsView",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidatable",
    data: BytesLike
  ): Result;

  events: {};
}

export class IBorrow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IBorrowInterface;

  functions: {
    getAccountDebt(
      _asset: string,
      _account: string,
      delaySeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAssetsView(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number
      ] & {
        debt: BigNumber;
        r0: BigNumber;
        relativeInterest: BigNumber;
        updatedAt: BigNumber;
        interestRate: number;
        base: number;
        optimal: number;
        slope1: number;
        slope2: number;
        borrowCredit: number;
        collateralCredit: number;
        penaltyRate: number;
      }
    >;

    getDebt(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getPositionsView(
      _asset: string,
      _account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string[], BigNumber[]] & {
        debt: BigNumber;
        r0: BigNumber;
        collateralTokens: string[];
        collateralAmounts: BigNumber[];
      }
    >;

    liquidatable(
      _asset: string,
      _account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  getAccountDebt(
    _asset: string,
    _account: string,
    delaySeconds: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAssetsView(
    _asset: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number
    ] & {
      debt: BigNumber;
      r0: BigNumber;
      relativeInterest: BigNumber;
      updatedAt: BigNumber;
      interestRate: number;
      base: number;
      optimal: number;
      slope1: number;
      slope2: number;
      borrowCredit: number;
      collateralCredit: number;
      penaltyRate: number;
    }
  >;

  getDebt(
    _asset: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getPositionsView(
    _asset: string,
    _account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string[], BigNumber[]] & {
      debt: BigNumber;
      r0: BigNumber;
      collateralTokens: string[];
      collateralAmounts: BigNumber[];
    }
  >;

  liquidatable(
    _asset: string,
    _account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    getAccountDebt(
      _asset: string,
      _account: string,
      delaySeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAssetsView(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number
      ] & {
        debt: BigNumber;
        r0: BigNumber;
        relativeInterest: BigNumber;
        updatedAt: BigNumber;
        interestRate: number;
        base: number;
        optimal: number;
        slope1: number;
        slope2: number;
        borrowCredit: number;
        collateralCredit: number;
        penaltyRate: number;
      }
    >;

    getDebt(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getPositionsView(
      _asset: string,
      _account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string[], BigNumber[]] & {
        debt: BigNumber;
        r0: BigNumber;
        collateralTokens: string[];
        collateralAmounts: BigNumber[];
      }
    >;

    liquidatable(
      _asset: string,
      _account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    getAccountDebt(
      _asset: string,
      _account: string,
      delaySeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAssetsView(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDebt(_asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPositionsView(
      _asset: string,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidatable(
      _asset: string,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAccountDebt(
      _asset: string,
      _account: string,
      delaySeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAssetsView(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDebt(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionsView(
      _asset: string,
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidatable(
      _asset: string,
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
