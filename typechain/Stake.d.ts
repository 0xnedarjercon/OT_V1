/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface StakeInterface extends ethers.utils.Interface {
  functions: {
    "addRevenue(address,address[],uint256[])": FunctionFragment;
    "addRevenueToken(address,address)": FunctionFragment;
    "addToken(address,address,uint256,uint256,uint256)": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "getAccountRevenueInfo(address,address)": FunctionFragment;
    "getPoolsKeyList()": FunctionFragment;
    "getTotalReward(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pending(address,address)": FunctionFragment;
    "pools(address)": FunctionFragment;
    "poolsKeyList(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revenueInfoList(address,uint256)": FunctionFragment;
    "revenueInfoMap(address,address)": FunctionFragment;
    "revenueTimeline(address,uint256,address)": FunctionFragment;
    "revenueTimelineIndexList(address,uint256)": FunctionFragment;
    "setPoolInfo(address,uint256,uint256)": FunctionFragment;
    "stakeBpAmount(address)": FunctionFragment;
    "stakeLastBpTime(address)": FunctionFragment;
    "stakeTokenAmount(address)": FunctionFragment;
    "stakeTokenDecimal(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updatePool(address)": FunctionFragment;
    "userInfo(address,address)": FunctionFragment;
    "userOpTimeline(address,address,uint256)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
    "withdrawAccountRevenue(address)": FunctionFragment;
    "withdrawReward(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addRevenue",
    values: [string, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addRevenueToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addToken",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountRevenueInfo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolsKeyList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalReward",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pending",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "pools", values: [string]): string;
  encodeFunctionData(
    functionFragment: "poolsKeyList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revenueInfoList",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revenueInfoMap",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revenueTimeline",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revenueTimelineIndexList",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolInfo",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeBpAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeLastBpTime",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeTokenAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeTokenDecimal",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "updatePool", values: [string]): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "userOpTimeline",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAccountRevenue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawReward",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "addRevenue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addRevenueToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountRevenueInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolsKeyList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pending", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolsKeyList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revenueInfoList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revenueInfoMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revenueTimeline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revenueTimelineIndexList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeBpAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeLastBpTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeTokenDecimal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userOpTimeline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAccountRevenue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawReward",
    data: BytesLike
  ): Result;

  events: {
    "Deposit(address,address,uint256)": EventFragment;
    "EmergencyWithdraw(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Withdraw(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type DepositEvent = TypedEvent<
  [string, string, BigNumber] & {
    user: string;
    lpToken: string;
    amount: BigNumber;
  }
>;

export type EmergencyWithdrawEvent = TypedEvent<
  [string, string, BigNumber] & {
    user: string;
    lpToken: string;
    amount: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type WithdrawEvent = TypedEvent<
  [string, string, BigNumber] & {
    user: string;
    lpToken: string;
    amount: BigNumber;
  }
>;

export class Stake extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StakeInterface;

  functions: {
    addRevenue(
      _lpToken: string,
      tokenList: string[],
      amountList: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addRevenueToken(
      _lpToken: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addToken(
      _rewardToken: string,
      _lpToken: string,
      _rewardPerSecond: BigNumberish,
      _startTime: BigNumberish,
      _deltaTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _lpToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAccountRevenueInfo(
      account: string,
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number[],
        string[],
        BigNumber[]
      ]
    >;

    getPoolsKeyList(overrides?: CallOverrides): Promise<[string[]]>;

    getTotalReward(
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pending(
      _lpToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, string]>;

    pools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        rewardToken: string;
        lpToken: string;
        lastRewardTime: BigNumber;
        accERC20PerShare: BigNumber;
        paidOut: BigNumber;
        rewardPerSecond: BigNumber;
        totalReward: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
      }
    >;

    poolsKeyList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revenueInfoList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    revenueInfoMap(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        rewardToken: string;
        paidOut: BigNumber;
        totalReward: BigNumber;
      }
    >;

    revenueTimeline(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { reward: BigNumber; supply: BigNumber }
    >;

    revenueTimelineIndexList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setPoolInfo(
      _lpToken: string,
      _rewardPerSecond: BigNumberish,
      _endTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeBpAmount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stakeLastBpTime(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stakeTokenAmount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stakeTokenDecimal(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePool(
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        user: string;
        bp: BigNumber;
        tempAmount: BigNumber;
        lastIndex: BigNumber;
      }
    >;

    userOpTimeline(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        op: number;
        amount: BigNumber;
        timestamp: BigNumber;
      }
    >;

    withdraw(
      _lpToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAccountRevenue(
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawReward(
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addRevenue(
    _lpToken: string,
    tokenList: string[],
    amountList: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addRevenueToken(
    _lpToken: string,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addToken(
    _rewardToken: string,
    _lpToken: string,
    _rewardPerSecond: BigNumberish,
    _startTime: BigNumberish,
    _deltaTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _lpToken: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAccountRevenueInfo(
    account: string,
    _lpToken: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number[],
      string[],
      BigNumber[]
    ]
  >;

  getPoolsKeyList(overrides?: CallOverrides): Promise<string[]>;

  getTotalReward(
    _lpToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pending(
    _lpToken: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, string]>;

  pools(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      rewardToken: string;
      lpToken: string;
      lastRewardTime: BigNumber;
      accERC20PerShare: BigNumber;
      paidOut: BigNumber;
      rewardPerSecond: BigNumber;
      totalReward: BigNumber;
      startTime: BigNumber;
      endTime: BigNumber;
    }
  >;

  poolsKeyList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revenueInfoList(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  revenueInfoMap(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      rewardToken: string;
      paidOut: BigNumber;
      totalReward: BigNumber;
    }
  >;

  revenueTimeline(
    arg0: string,
    arg1: BigNumberish,
    arg2: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { reward: BigNumber; supply: BigNumber }>;

  revenueTimelineIndexList(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setPoolInfo(
    _lpToken: string,
    _rewardPerSecond: BigNumberish,
    _endTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeBpAmount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  stakeLastBpTime(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  stakeTokenAmount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  stakeTokenDecimal(arg0: string, overrides?: CallOverrides): Promise<number>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePool(
    _lpToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      rewardDebt: BigNumber;
      user: string;
      bp: BigNumber;
      tempAmount: BigNumber;
      lastIndex: BigNumber;
    }
  >;

  userOpTimeline(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber] & {
      op: number;
      amount: BigNumber;
      timestamp: BigNumber;
    }
  >;

  withdraw(
    _lpToken: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAccountRevenue(
    _lpToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawReward(
    _lpToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addRevenue(
      _lpToken: string,
      tokenList: string[],
      amountList: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    addRevenueToken(
      _lpToken: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addToken(
      _rewardToken: string,
      _lpToken: string,
      _rewardPerSecond: BigNumberish,
      _startTime: BigNumberish,
      _deltaTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      _lpToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAccountRevenueInfo(
      account: string,
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number[],
        string[],
        BigNumber[]
      ]
    >;

    getPoolsKeyList(overrides?: CallOverrides): Promise<string[]>;

    getTotalReward(
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pending(
      _lpToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, string]>;

    pools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        rewardToken: string;
        lpToken: string;
        lastRewardTime: BigNumber;
        accERC20PerShare: BigNumber;
        paidOut: BigNumber;
        rewardPerSecond: BigNumber;
        totalReward: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
      }
    >;

    poolsKeyList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revenueInfoList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    revenueInfoMap(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        rewardToken: string;
        paidOut: BigNumber;
        totalReward: BigNumber;
      }
    >;

    revenueTimeline(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { reward: BigNumber; supply: BigNumber }
    >;

    revenueTimelineIndexList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setPoolInfo(
      _lpToken: string,
      _rewardPerSecond: BigNumberish,
      _endTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeBpAmount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    stakeLastBpTime(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeTokenAmount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeTokenDecimal(arg0: string, overrides?: CallOverrides): Promise<number>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePool(_lpToken: string, overrides?: CallOverrides): Promise<void>;

    userInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        user: string;
        bp: BigNumber;
        tempAmount: BigNumber;
        lastIndex: BigNumber;
      }
    >;

    userOpTimeline(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        op: number;
        amount: BigNumber;
        timestamp: BigNumber;
      }
    >;

    withdraw(
      _lpToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAccountRevenue(
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawReward(_lpToken: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Deposit(address,address,uint256)"(
      user?: string | null,
      lpToken?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; lpToken: string; amount: BigNumber }
    >;

    Deposit(
      user?: string | null,
      lpToken?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; lpToken: string; amount: BigNumber }
    >;

    "EmergencyWithdraw(address,address,uint256)"(
      user?: string | null,
      lpToken?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; lpToken: string; amount: BigNumber }
    >;

    EmergencyWithdraw(
      user?: string | null,
      lpToken?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; lpToken: string; amount: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Withdraw(address,address,uint256)"(
      user?: string | null,
      lpToken?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; lpToken: string; amount: BigNumber }
    >;

    Withdraw(
      user?: string | null,
      lpToken?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; lpToken: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    addRevenue(
      _lpToken: string,
      tokenList: string[],
      amountList: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addRevenueToken(
      _lpToken: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addToken(
      _rewardToken: string,
      _lpToken: string,
      _rewardPerSecond: BigNumberish,
      _startTime: BigNumberish,
      _deltaTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      _lpToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAccountRevenueInfo(
      account: string,
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolsKeyList(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalReward(
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pending(
      _lpToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pools(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    poolsKeyList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revenueInfoList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revenueInfoMap(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revenueTimeline(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revenueTimelineIndexList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setPoolInfo(
      _lpToken: string,
      _rewardPerSecond: BigNumberish,
      _endTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeBpAmount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    stakeLastBpTime(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeTokenAmount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeTokenDecimal(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePool(
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userOpTimeline(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _lpToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAccountRevenue(
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawReward(
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addRevenue(
      _lpToken: string,
      tokenList: string[],
      amountList: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addRevenueToken(
      _lpToken: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addToken(
      _rewardToken: string,
      _lpToken: string,
      _rewardPerSecond: BigNumberish,
      _startTime: BigNumberish,
      _deltaTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _lpToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAccountRevenueInfo(
      account: string,
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolsKeyList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalReward(
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pending(
      _lpToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolsKeyList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revenueInfoList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revenueInfoMap(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revenueTimeline(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revenueTimelineIndexList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setPoolInfo(
      _lpToken: string,
      _rewardPerSecond: BigNumberish,
      _endTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeBpAmount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakeLastBpTime(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakeTokenAmount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakeTokenDecimal(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePool(
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userOpTimeline(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _lpToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAccountRevenue(
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawReward(
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
