/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface VariableBorrowRouterInterface extends ethers.utils.Interface {
  functions: {
    "addMintPool(address,address,uint256,uint256,uint256)": FunctionFragment;
    "borrow(address,uint256,tuple[],address)": FunctionFragment;
    "getReward(address,address)": FunctionFragment;
    "getWETHAddress()": FunctionFragment;
    "oracle()": FunctionFragment;
    "owner()": FunctionFragment;
    "pools(address)": FunctionFragment;
    "positions(address,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "repay(address,uint256,tuple[],address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateMintPool(address,uint256,uint256,uint256)": FunctionFragment;
    "withdrawReward(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addMintPool",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [
      string,
      BigNumberish,
      { token: string; amount: BigNumberish }[],
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getReward",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getWETHAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pools", values: [string]): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [
      string,
      BigNumberish,
      { token: string; amount: BigNumberish }[],
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMintPool",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawReward",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addMintPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getWETHAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMintPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawReward",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class VariableBorrowRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VariableBorrowRouterInterface;

  functions: {
    addMintPool(
      _rewardToken: string,
      _asset: string,
      _rewardPerSecond: BigNumberish,
      _startTime: BigNumberish,
      _deltaTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrow(
      _asset: string,
      amount: BigNumberish,
      collaterals: { token: string; amount: BigNumberish }[],
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getReward(
      _borrowToken: string,
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, string]>;

    getWETHAddress(overrides?: CallOverrides): Promise<[string]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        rewardToken: string;
        accERC20PerShare: BigNumber;
        paidOut: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        lastRewardTime: BigNumber;
        rewardPerSecond: BigNumber;
        totalReward: BigNumber;
      }
    >;

    positions(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rewardDebt: BigNumber }>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repay(
      _asset: string,
      amountMax: BigNumberish,
      collaterals: { token: string; amount: BigNumberish }[],
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMintPool(
      _asset: string,
      _rewardPerSecond: BigNumberish,
      _startTime: BigNumberish,
      _deltaTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawReward(
      _borrowToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addMintPool(
    _rewardToken: string,
    _asset: string,
    _rewardPerSecond: BigNumberish,
    _startTime: BigNumberish,
    _deltaTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrow(
    _asset: string,
    amount: BigNumberish,
    collaterals: { token: string; amount: BigNumberish }[],
    to: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getReward(
    _borrowToken: string,
    _account: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, string]>;

  getWETHAddress(overrides?: CallOverrides): Promise<string>;

  oracle(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pools(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      rewardToken: string;
      accERC20PerShare: BigNumber;
      paidOut: BigNumber;
      startTime: BigNumber;
      endTime: BigNumber;
      lastRewardTime: BigNumber;
      rewardPerSecond: BigNumber;
      totalReward: BigNumber;
    }
  >;

  positions(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repay(
    _asset: string,
    amountMax: BigNumberish,
    collaterals: { token: string; amount: BigNumberish }[],
    to: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMintPool(
    _asset: string,
    _rewardPerSecond: BigNumberish,
    _startTime: BigNumberish,
    _deltaTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawReward(
    _borrowToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addMintPool(
      _rewardToken: string,
      _asset: string,
      _rewardPerSecond: BigNumberish,
      _startTime: BigNumberish,
      _deltaTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    borrow(
      _asset: string,
      amount: BigNumberish,
      collaterals: { token: string; amount: BigNumberish }[],
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getReward(
      _borrowToken: string,
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, string]>;

    getWETHAddress(overrides?: CallOverrides): Promise<string>;

    oracle(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        rewardToken: string;
        accERC20PerShare: BigNumber;
        paidOut: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        lastRewardTime: BigNumber;
        rewardPerSecond: BigNumber;
        totalReward: BigNumber;
      }
    >;

    positions(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    repay(
      _asset: string,
      amountMax: BigNumberish,
      collaterals: { token: string; amount: BigNumberish }[],
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMintPool(
      _asset: string,
      _rewardPerSecond: BigNumberish,
      _startTime: BigNumberish,
      _deltaTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawReward(
      _borrowToken: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    addMintPool(
      _rewardToken: string,
      _asset: string,
      _rewardPerSecond: BigNumberish,
      _startTime: BigNumberish,
      _deltaTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrow(
      _asset: string,
      amount: BigNumberish,
      collaterals: { token: string; amount: BigNumberish }[],
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getReward(
      _borrowToken: string,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWETHAddress(overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pools(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    positions(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repay(
      _asset: string,
      amountMax: BigNumberish,
      collaterals: { token: string; amount: BigNumberish }[],
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMintPool(
      _asset: string,
      _rewardPerSecond: BigNumberish,
      _startTime: BigNumberish,
      _deltaTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawReward(
      _borrowToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addMintPool(
      _rewardToken: string,
      _asset: string,
      _rewardPerSecond: BigNumberish,
      _startTime: BigNumberish,
      _deltaTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrow(
      _asset: string,
      amount: BigNumberish,
      collaterals: { token: string; amount: BigNumberish }[],
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getReward(
      _borrowToken: string,
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWETHAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positions(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repay(
      _asset: string,
      amountMax: BigNumberish,
      collaterals: { token: string; amount: BigNumberish }[],
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMintPool(
      _asset: string,
      _rewardPerSecond: BigNumberish,
      _startTime: BigNumberish,
      _deltaTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawReward(
      _borrowToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
