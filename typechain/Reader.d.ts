/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ReaderInterface extends ethers.utils.Interface {
  functions: {
    "borrow()": FunctionFragment;
    "borrowPrice()": FunctionFragment;
    "bulkAccountBorrowPosition(address,address[])": FunctionFragment;
    "bulkBorrowAssetInfo(address[])": FunctionFragment;
    "bulkBorrowAssetInfoPart(address[])": FunctionFragment;
    "bulkBorrowAssetState(address[])": FunctionFragment;
    "bulkBorrowDebt(address[],address[])": FunctionFragment;
    "bulkBorrowLiquidatable(address[],address[])": FunctionFragment;
    "bulkBorrowPrice(address[])": FunctionFragment;
    "bulkLpPrices(address[])": FunctionFragment;
    "bulkStakeInfo(address,address,address[])": FunctionFragment;
    "bulkSwapPoolInfo(address[])": FunctionFragment;
    "bulkSwapRatio(address[])": FunctionFragment;
    "bulkToken(address,address[])": FunctionFragment;
    "swap()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "borrow", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "borrowPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bulkAccountBorrowPosition",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkBorrowAssetInfo",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkBorrowAssetInfoPart",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkBorrowAssetState",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkBorrowDebt",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkBorrowLiquidatable",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkBorrowPrice",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkLpPrices",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkStakeInfo",
    values: [string, string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkSwapPoolInfo",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkSwapRatio",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkToken",
    values: [string, string[]]
  ): string;
  encodeFunctionData(functionFragment: "swap", values?: undefined): string;

  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkAccountBorrowPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkBorrowAssetInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkBorrowAssetInfoPart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkBorrowAssetState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkBorrowDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkBorrowLiquidatable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkBorrowPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkLpPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkStakeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkSwapPoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkSwapRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bulkToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;

  events: {};
}

export class Reader extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ReaderInterface;

  functions: {
    borrow(overrides?: CallOverrides): Promise<[string]>;

    borrowPrice(overrides?: CallOverrides): Promise<[string]>;

    bulkAccountBorrowPosition(
      account: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[], BigNumber[], string[], BigNumber[]] & {
        debtList: BigNumber[];
        r0List: BigNumber[];
        collateralNum: BigNumber[];
        collateralTokenList: string[];
        collateralAmountList: BigNumber[];
      }
    >;

    bulkBorrowAssetInfo(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        number[],
        number[],
        number[],
        number[],
        number[],
        number[],
        number[],
        number[]
      ] & {
        interestRateList: number[];
        baseList: number[];
        optimalList: number[];
        slope1List: number[];
        slope2List: number[];
        borrowCreditList: number[];
        collateralCreditList: number[];
        penaltyRateList: number[];
      }
    >;

    bulkBorrowAssetInfoPart(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<
      [number[], number[], number[]] & {
        borrowCreditList: number[];
        collateralCreditList: number[];
        penaltyRateList: number[];
      }
    >;

    bulkBorrowAssetState(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[], BigNumber[], BigNumber[]] & {
        debtList: BigNumber[];
        r0List: BigNumber[];
        relativeInterestList: BigNumber[];
        updatedAtList: BigNumber[];
      }
    >;

    bulkBorrowDebt(
      assets: string[],
      accounts: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { debts: BigNumber[] }>;

    bulkBorrowLiquidatable(
      assets: string[],
      accounts: string[],
      overrides?: CallOverrides
    ): Promise<[boolean[]] & { shouldLiquidates: boolean[] }>;

    bulkBorrowPrice(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { priceList: BigNumber[] }>;

    bulkLpPrices(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { lpPrices: BigNumber[] }>;

    bulkStakeInfo(
      stake: string,
      account: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber[],
        BigNumber[],
        BigNumber[],
        BigNumber[],
        BigNumber[],
        string[],
        number[],
        BigNumber[]
      ] & {
        accountYeilds: BigNumber[];
        totalYeilds: BigNumber[];
        dayStaked: BigNumber[];
        accountStakeds: BigNumber[];
        totalStakeds: BigNumber[];
        rewardTokens: string[];
        rewardTokensDecimal: number[];
        rewardTokenPrices: BigNumber[];
      }
    >;

    bulkSwapPoolInfo(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[], boolean[], boolean[], string[]] & {
        reserveTokens: BigNumber[];
        reserveOsds: BigNumber[];
        isUsePriceFeeds: boolean[];
        isRebalancible: boolean[];
        liquidityList: string[];
      }
    >;

    bulkSwapRatio(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & {
        ratioTokens: BigNumber[];
        ratioOsds: BigNumber[];
      }
    >;

    bulkToken(
      account: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[], number[], string[], string[]] & {
        balances: BigNumber[];
        totalSupplys: BigNumber[];
        decimals: number[];
        names: string[];
        symbols: string[];
      }
    >;

    swap(overrides?: CallOverrides): Promise<[string]>;
  };

  borrow(overrides?: CallOverrides): Promise<string>;

  borrowPrice(overrides?: CallOverrides): Promise<string>;

  bulkAccountBorrowPosition(
    account: string,
    tokens: string[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber[], BigNumber[], string[], BigNumber[]] & {
      debtList: BigNumber[];
      r0List: BigNumber[];
      collateralNum: BigNumber[];
      collateralTokenList: string[];
      collateralAmountList: BigNumber[];
    }
  >;

  bulkBorrowAssetInfo(
    tokens: string[],
    overrides?: CallOverrides
  ): Promise<
    [
      number[],
      number[],
      number[],
      number[],
      number[],
      number[],
      number[],
      number[]
    ] & {
      interestRateList: number[];
      baseList: number[];
      optimalList: number[];
      slope1List: number[];
      slope2List: number[];
      borrowCreditList: number[];
      collateralCreditList: number[];
      penaltyRateList: number[];
    }
  >;

  bulkBorrowAssetInfoPart(
    tokens: string[],
    overrides?: CallOverrides
  ): Promise<
    [number[], number[], number[]] & {
      borrowCreditList: number[];
      collateralCreditList: number[];
      penaltyRateList: number[];
    }
  >;

  bulkBorrowAssetState(
    tokens: string[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber[], BigNumber[], BigNumber[]] & {
      debtList: BigNumber[];
      r0List: BigNumber[];
      relativeInterestList: BigNumber[];
      updatedAtList: BigNumber[];
    }
  >;

  bulkBorrowDebt(
    assets: string[],
    accounts: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  bulkBorrowLiquidatable(
    assets: string[],
    accounts: string[],
    overrides?: CallOverrides
  ): Promise<boolean[]>;

  bulkBorrowPrice(
    tokens: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  bulkLpPrices(
    tokens: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  bulkStakeInfo(
    stake: string,
    account: string,
    tokens: string[],
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber[],
      BigNumber[],
      BigNumber[],
      BigNumber[],
      BigNumber[],
      string[],
      number[],
      BigNumber[]
    ] & {
      accountYeilds: BigNumber[];
      totalYeilds: BigNumber[];
      dayStaked: BigNumber[];
      accountStakeds: BigNumber[];
      totalStakeds: BigNumber[];
      rewardTokens: string[];
      rewardTokensDecimal: number[];
      rewardTokenPrices: BigNumber[];
    }
  >;

  bulkSwapPoolInfo(
    tokens: string[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber[], boolean[], boolean[], string[]] & {
      reserveTokens: BigNumber[];
      reserveOsds: BigNumber[];
      isUsePriceFeeds: boolean[];
      isRebalancible: boolean[];
      liquidityList: string[];
    }
  >;

  bulkSwapRatio(
    tokens: string[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber[]] & {
      ratioTokens: BigNumber[];
      ratioOsds: BigNumber[];
    }
  >;

  bulkToken(
    account: string,
    tokens: string[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber[], number[], string[], string[]] & {
      balances: BigNumber[];
      totalSupplys: BigNumber[];
      decimals: number[];
      names: string[];
      symbols: string[];
    }
  >;

  swap(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    borrow(overrides?: CallOverrides): Promise<string>;

    borrowPrice(overrides?: CallOverrides): Promise<string>;

    bulkAccountBorrowPosition(
      account: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[], BigNumber[], string[], BigNumber[]] & {
        debtList: BigNumber[];
        r0List: BigNumber[];
        collateralNum: BigNumber[];
        collateralTokenList: string[];
        collateralAmountList: BigNumber[];
      }
    >;

    bulkBorrowAssetInfo(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        number[],
        number[],
        number[],
        number[],
        number[],
        number[],
        number[],
        number[]
      ] & {
        interestRateList: number[];
        baseList: number[];
        optimalList: number[];
        slope1List: number[];
        slope2List: number[];
        borrowCreditList: number[];
        collateralCreditList: number[];
        penaltyRateList: number[];
      }
    >;

    bulkBorrowAssetInfoPart(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<
      [number[], number[], number[]] & {
        borrowCreditList: number[];
        collateralCreditList: number[];
        penaltyRateList: number[];
      }
    >;

    bulkBorrowAssetState(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[], BigNumber[], BigNumber[]] & {
        debtList: BigNumber[];
        r0List: BigNumber[];
        relativeInterestList: BigNumber[];
        updatedAtList: BigNumber[];
      }
    >;

    bulkBorrowDebt(
      assets: string[],
      accounts: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    bulkBorrowLiquidatable(
      assets: string[],
      accounts: string[],
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    bulkBorrowPrice(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    bulkLpPrices(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    bulkStakeInfo(
      stake: string,
      account: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber[],
        BigNumber[],
        BigNumber[],
        BigNumber[],
        BigNumber[],
        string[],
        number[],
        BigNumber[]
      ] & {
        accountYeilds: BigNumber[];
        totalYeilds: BigNumber[];
        dayStaked: BigNumber[];
        accountStakeds: BigNumber[];
        totalStakeds: BigNumber[];
        rewardTokens: string[];
        rewardTokensDecimal: number[];
        rewardTokenPrices: BigNumber[];
      }
    >;

    bulkSwapPoolInfo(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[], boolean[], boolean[], string[]] & {
        reserveTokens: BigNumber[];
        reserveOsds: BigNumber[];
        isUsePriceFeeds: boolean[];
        isRebalancible: boolean[];
        liquidityList: string[];
      }
    >;

    bulkSwapRatio(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & {
        ratioTokens: BigNumber[];
        ratioOsds: BigNumber[];
      }
    >;

    bulkToken(
      account: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[], number[], string[], string[]] & {
        balances: BigNumber[];
        totalSupplys: BigNumber[];
        decimals: number[];
        names: string[];
        symbols: string[];
      }
    >;

    swap(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    borrow(overrides?: CallOverrides): Promise<BigNumber>;

    borrowPrice(overrides?: CallOverrides): Promise<BigNumber>;

    bulkAccountBorrowPosition(
      account: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkBorrowAssetInfo(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkBorrowAssetInfoPart(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkBorrowAssetState(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkBorrowDebt(
      assets: string[],
      accounts: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkBorrowLiquidatable(
      assets: string[],
      accounts: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkBorrowPrice(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkLpPrices(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkStakeInfo(
      stake: string,
      account: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkSwapPoolInfo(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkSwapRatio(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkToken(
      account: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swap(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    borrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bulkAccountBorrowPosition(
      account: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkBorrowAssetInfo(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkBorrowAssetInfoPart(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkBorrowAssetState(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkBorrowDebt(
      assets: string[],
      accounts: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkBorrowLiquidatable(
      assets: string[],
      accounts: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkBorrowPrice(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkLpPrices(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkStakeInfo(
      stake: string,
      account: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkSwapPoolInfo(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkSwapRatio(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkToken(
      account: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swap(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
