/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ISwapInterface extends ethers.utils.Interface {
  functions: {
    "getPoolFeePolicy(address)": FunctionFragment;
    "getPoolInfo(address)": FunctionFragment;
    "getPoolState(address)": FunctionFragment;
    "getPriceRatio(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getPoolFeePolicy",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getPoolInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getPoolState",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceRatio",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getPoolFeePolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceRatio",
    data: BytesLike
  ): Result;

  events: {};
}

export class ISwap extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ISwapInterface;

  functions: {
    getPoolFeePolicy(
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, number, BigNumber] & {
        feeType: number;
        feeRate0: number;
        feeRate1: number;
        feeRate2: number;
        revenueRate: number;
        revenueOsd: BigNumber;
      }
    >;

    getPoolInfo(
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean, boolean] & {
        liquidity: string;
        createdAt: BigNumber;
        rebalancible: boolean;
        usePriceFeed: boolean;
      }
    >;

    getPoolState(
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        reserve: BigNumber;
        lastRatioToken: BigNumber;
        lastRatioOsd: BigNumber;
        osd_: BigNumber;
      }
    >;

    getPriceRatio(
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { tokenRatio: BigNumber; osdRatio: BigNumber }
    >;
  };

  getPoolFeePolicy(
    token: string,
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number, number, BigNumber] & {
      feeType: number;
      feeRate0: number;
      feeRate1: number;
      feeRate2: number;
      revenueRate: number;
      revenueOsd: BigNumber;
    }
  >;

  getPoolInfo(
    token: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, boolean, boolean] & {
      liquidity: string;
      createdAt: BigNumber;
      rebalancible: boolean;
      usePriceFeed: boolean;
    }
  >;

  getPoolState(
    token: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      reserve: BigNumber;
      lastRatioToken: BigNumber;
      lastRatioOsd: BigNumber;
      osd_: BigNumber;
    }
  >;

  getPriceRatio(
    token: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { tokenRatio: BigNumber; osdRatio: BigNumber }
  >;

  callStatic: {
    getPoolFeePolicy(
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, number, BigNumber] & {
        feeType: number;
        feeRate0: number;
        feeRate1: number;
        feeRate2: number;
        revenueRate: number;
        revenueOsd: BigNumber;
      }
    >;

    getPoolInfo(
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean, boolean] & {
        liquidity: string;
        createdAt: BigNumber;
        rebalancible: boolean;
        usePriceFeed: boolean;
      }
    >;

    getPoolState(
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        reserve: BigNumber;
        lastRatioToken: BigNumber;
        lastRatioOsd: BigNumber;
        osd_: BigNumber;
      }
    >;

    getPriceRatio(
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { tokenRatio: BigNumber; osdRatio: BigNumber }
    >;
  };

  filters: {};

  estimateGas: {
    getPoolFeePolicy(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolInfo(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPoolState(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPriceRatio(token: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getPoolFeePolicy(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolInfo(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolState(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceRatio(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
