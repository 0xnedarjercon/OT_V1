/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface FastPriceFeedInterface extends ethers.utils.Interface {
  functions: {
    "BASIS_POINTS_DIVISOR()": FunctionFragment;
    "MAX_PRICE_DURATION()": FunctionFragment;
    "PRICE_BITMASK()": FunctionFragment;
    "PRICE_PRECISION()": FunctionFragment;
    "fastPriceEvent()": FunctionFragment;
    "getPlainPrice(address)": FunctionFragment;
    "getPrice(address,uint256)": FunctionFragment;
    "isUpdater(address)": FunctionFragment;
    "lastUpdatedAt()": FunctionFragment;
    "lastUpdatedBlock()": FunctionFragment;
    "maxDeviationBasisPoints()": FunctionFragment;
    "maxTimeDeviation()": FunctionFragment;
    "minBlockInterval()": FunctionFragment;
    "owner()": FunctionFragment;
    "priceDuration()": FunctionFragment;
    "prices(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setCompactedPrices(uint256[],uint256)": FunctionFragment;
    "setFastPriceEvents(address)": FunctionFragment;
    "setLastUpdatedAt(uint256)": FunctionFragment;
    "setMaxDeviationBasisPoints(uint256)": FunctionFragment;
    "setMaxTimeDeviation(uint256)": FunctionFragment;
    "setMinBlockInterval(uint256)": FunctionFragment;
    "setPrice(address,uint256,uint256)": FunctionFragment;
    "setPriceDuration(uint256)": FunctionFragment;
    "setPrices(address[],uint256[],uint256)": FunctionFragment;
    "setPricesWithBits(uint256,uint256)": FunctionFragment;
    "setTokens(address[],uint256[])": FunctionFragment;
    "setUpdater(address,bool)": FunctionFragment;
    "tokenPrecisions(uint256)": FunctionFragment;
    "tokens(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BASIS_POINTS_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PRICE_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRICE_BITMASK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRICE_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fastPriceEvent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlainPrice",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isUpdater", values: [string]): string;
  encodeFunctionData(
    functionFragment: "lastUpdatedAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdatedBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxDeviationBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTimeDeviation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minBlockInterval",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceDuration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "prices", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCompactedPrices",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFastPriceEvents",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLastUpdatedAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxDeviationBasisPoints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTimeDeviation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinBlockInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrice",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrices",
    values: [string[], BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPricesWithBits",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokens",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpdater",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenPrecisions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PRICE_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRICE_BITMASK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRICE_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fastPriceEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlainPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isUpdater", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdatedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdatedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxDeviationBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTimeDeviation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minBlockInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "prices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCompactedPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFastPriceEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLastUpdatedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxDeviationBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTimeDeviation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinBlockInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPriceDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPrices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPricesWithBits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUpdater", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenPrecisions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class FastPriceFeed extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FastPriceFeedInterface;

  functions: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_PRICE_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRICE_BITMASK(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    fastPriceEvent(overrides?: CallOverrides): Promise<[string]>;

    getPlainPrice(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPrice(
      _token: string,
      _refPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isUpdater(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    lastUpdatedAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastUpdatedBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxDeviationBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxTimeDeviation(overrides?: CallOverrides): Promise<[BigNumber]>;

    minBlockInterval(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    priceDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    prices(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCompactedPrices(
      _priceBitArray: BigNumberish[],
      _timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFastPriceEvents(
      _fastPriceEvent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLastUpdatedAt(
      _lastUpdatedAt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxDeviationBasisPoints(
      _maxDeviationBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxTimeDeviation(
      _maxTimeDeviation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinBlockInterval(
      _minBlockInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPrice(
      _token: string,
      _price: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPriceDuration(
      _priceDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPrices(
      _tokens: string[],
      _prices: BigNumberish[],
      _timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPricesWithBits(
      _priceBits: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokens(
      _tokens: string[],
      _tokenPrecisions: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUpdater(
      _account: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenPrecisions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_PRICE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  PRICE_BITMASK(overrides?: CallOverrides): Promise<BigNumber>;

  PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  fastPriceEvent(overrides?: CallOverrides): Promise<string>;

  getPlainPrice(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

  getPrice(
    _token: string,
    _refPrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isUpdater(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  lastUpdatedAt(overrides?: CallOverrides): Promise<BigNumber>;

  lastUpdatedBlock(overrides?: CallOverrides): Promise<BigNumber>;

  maxDeviationBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  maxTimeDeviation(overrides?: CallOverrides): Promise<BigNumber>;

  minBlockInterval(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  priceDuration(overrides?: CallOverrides): Promise<BigNumber>;

  prices(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCompactedPrices(
    _priceBitArray: BigNumberish[],
    _timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFastPriceEvents(
    _fastPriceEvent: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLastUpdatedAt(
    _lastUpdatedAt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxDeviationBasisPoints(
    _maxDeviationBasisPoints: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxTimeDeviation(
    _maxTimeDeviation: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinBlockInterval(
    _minBlockInterval: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPrice(
    _token: string,
    _price: BigNumberish,
    _timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPriceDuration(
    _priceDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPrices(
    _tokens: string[],
    _prices: BigNumberish[],
    _timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPricesWithBits(
    _priceBits: BigNumberish,
    _timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokens(
    _tokens: string[],
    _tokenPrecisions: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUpdater(
    _account: string,
    _isActive: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenPrecisions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PRICE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_BITMASK(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    fastPriceEvent(overrides?: CallOverrides): Promise<string>;

    getPlainPrice(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      _token: string,
      _refPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isUpdater(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    lastUpdatedAt(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdatedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    maxDeviationBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    maxTimeDeviation(overrides?: CallOverrides): Promise<BigNumber>;

    minBlockInterval(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    priceDuration(overrides?: CallOverrides): Promise<BigNumber>;

    prices(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setCompactedPrices(
      _priceBitArray: BigNumberish[],
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFastPriceEvents(
      _fastPriceEvent: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLastUpdatedAt(
      _lastUpdatedAt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxDeviationBasisPoints(
      _maxDeviationBasisPoints: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxTimeDeviation(
      _maxTimeDeviation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinBlockInterval(
      _minBlockInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrice(
      _token: string,
      _price: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceDuration(
      _priceDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrices(
      _tokens: string[],
      _prices: BigNumberish[],
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPricesWithBits(
      _priceBits: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokens(
      _tokens: string[],
      _tokenPrecisions: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setUpdater(
      _account: string,
      _isActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenPrecisions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PRICE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_BITMASK(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    fastPriceEvent(overrides?: CallOverrides): Promise<BigNumber>;

    getPlainPrice(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      _token: string,
      _refPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isUpdater(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdatedAt(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdatedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    maxDeviationBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    maxTimeDeviation(overrides?: CallOverrides): Promise<BigNumber>;

    minBlockInterval(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    priceDuration(overrides?: CallOverrides): Promise<BigNumber>;

    prices(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCompactedPrices(
      _priceBitArray: BigNumberish[],
      _timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFastPriceEvents(
      _fastPriceEvent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLastUpdatedAt(
      _lastUpdatedAt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxDeviationBasisPoints(
      _maxDeviationBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxTimeDeviation(
      _maxTimeDeviation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinBlockInterval(
      _minBlockInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPrice(
      _token: string,
      _price: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPriceDuration(
      _priceDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPrices(
      _tokens: string[],
      _prices: BigNumberish[],
      _timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPricesWithBits(
      _priceBits: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokens(
      _tokens: string[],
      _tokenPrecisions: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUpdater(
      _account: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenPrecisions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASIS_POINTS_DIVISOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_PRICE_DURATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PRICE_BITMASK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fastPriceEvent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPlainPrice(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      _token: string,
      _refPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isUpdater(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastUpdatedAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastUpdatedBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxDeviationBasisPoints(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxTimeDeviation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minBlockInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prices(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCompactedPrices(
      _priceBitArray: BigNumberish[],
      _timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFastPriceEvents(
      _fastPriceEvent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLastUpdatedAt(
      _lastUpdatedAt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxDeviationBasisPoints(
      _maxDeviationBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxTimeDeviation(
      _maxTimeDeviation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinBlockInterval(
      _minBlockInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPrice(
      _token: string,
      _price: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPriceDuration(
      _priceDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPrices(
      _tokens: string[],
      _prices: BigNumberish[],
      _timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPricesWithBits(
      _priceBits: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokens(
      _tokens: string[],
      _tokenPrecisions: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUpdater(
      _account: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenPrecisions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
