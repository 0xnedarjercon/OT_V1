/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IFutureUtilInterface extends ethers.utils.Interface {
  functions: {
    "getMaintanenceMarginRatio(address,address,address,bool)": FunctionFragment;
    "getTradingFee(address,address,address,bool,uint256)": FunctionFragment;
    "getUtilisationRatio(address,address,int256,int256)": FunctionFragment;
    "updateFundingRate(address,address,int256,int256,int256,int256)": FunctionFragment;
    "validateDecreasePosition()": FunctionFragment;
    "validateIncreasePosition()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getMaintanenceMarginRatio",
    values: [string, string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradingFee",
    values: [string, string, string, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUtilisationRatio",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFundingRate",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validateDecreasePosition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validateIncreasePosition",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getMaintanenceMarginRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUtilisationRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFundingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateDecreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateIncreasePosition",
    data: BytesLike
  ): Result;

  events: {};
}

export class IFutureUtil extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IFutureUtilInterface;

  functions: {
    getMaintanenceMarginRatio(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { marginRatio: BigNumber }>;

    getTradingFee(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      _notionalDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUtilisationRatio(
      _collateralToken: string,
      _indexToken: string,
      _longSizeDelta: BigNumberish,
      _shortSizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    updateFundingRate(
      _collateralToken: string,
      _indexToken: string,
      _longNotionalDelta: BigNumberish,
      _shortNotionalDelta: BigNumberish,
      _longSizeDelta: BigNumberish,
      _shortSizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
    >;

    validateDecreasePosition(overrides?: CallOverrides): Promise<[void]>;

    validateIncreasePosition(overrides?: CallOverrides): Promise<[void]>;
  };

  getMaintanenceMarginRatio(
    _collateralToken: string,
    _indexToken: string,
    _account: string,
    _isLong: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTradingFee(
    _collateralToken: string,
    _indexToken: string,
    _account: string,
    _isLong: boolean,
    _notionalDelta: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUtilisationRatio(
    _collateralToken: string,
    _indexToken: string,
    _longSizeDelta: BigNumberish,
    _shortSizeDelta: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  updateFundingRate(
    _collateralToken: string,
    _indexToken: string,
    _longNotionalDelta: BigNumberish,
    _shortNotionalDelta: BigNumberish,
    _longSizeDelta: BigNumberish,
    _shortSizeDelta: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

  validateDecreasePosition(overrides?: CallOverrides): Promise<void>;

  validateIncreasePosition(overrides?: CallOverrides): Promise<void>;

  callStatic: {
    getMaintanenceMarginRatio(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradingFee(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      _notionalDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUtilisationRatio(
      _collateralToken: string,
      _indexToken: string,
      _longSizeDelta: BigNumberish,
      _shortSizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateFundingRate(
      _collateralToken: string,
      _indexToken: string,
      _longNotionalDelta: BigNumberish,
      _shortNotionalDelta: BigNumberish,
      _longSizeDelta: BigNumberish,
      _shortSizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
    >;

    validateDecreasePosition(overrides?: CallOverrides): Promise<void>;

    validateIncreasePosition(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getMaintanenceMarginRatio(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradingFee(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      _notionalDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUtilisationRatio(
      _collateralToken: string,
      _indexToken: string,
      _longSizeDelta: BigNumberish,
      _shortSizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateFundingRate(
      _collateralToken: string,
      _indexToken: string,
      _longNotionalDelta: BigNumberish,
      _shortNotionalDelta: BigNumberish,
      _longSizeDelta: BigNumberish,
      _shortSizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateDecreasePosition(overrides?: CallOverrides): Promise<BigNumber>;

    validateIncreasePosition(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getMaintanenceMarginRatio(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTradingFee(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      _notionalDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUtilisationRatio(
      _collateralToken: string,
      _indexToken: string,
      _longSizeDelta: BigNumberish,
      _shortSizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateFundingRate(
      _collateralToken: string,
      _indexToken: string,
      _longNotionalDelta: BigNumberish,
      _shortNotionalDelta: BigNumberish,
      _longSizeDelta: BigNumberish,
      _shortSizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateDecreasePosition(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateIncreasePosition(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
