/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface FutureUtilInterface extends ethers.utils.Interface {
  functions: {
    "fundingRateMultiplier(bytes32)": FunctionFragment;
    "future()": FunctionFragment;
    "getAccountKey(address,address,address,bool)": FunctionFragment;
    "getIncreaseFundingFee(address,address,address,bool,uint256)": FunctionFragment;
    "getMaintanenceMarginRatio(address,address,address,bool)": FunctionFragment;
    "getPairKey(address,address)": FunctionFragment;
    "getPositionFundingFee(address,address,address,bool)": FunctionFragment;
    "getTradingFee(address,address,address,bool,uint256)": FunctionFragment;
    "getUtilisationRatio(address,address,int256,int256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setFundingRateMultiplier(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateFundingRate(address,address,int256,int256,int256,int256)": FunctionFragment;
    "validateDecreasePosition()": FunctionFragment;
    "validateIncreasePosition()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "fundingRateMultiplier",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "future", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAccountKey",
    values: [string, string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getIncreaseFundingFee",
    values: [string, string, string, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaintanenceMarginRatio",
    values: [string, string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getPairKey",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionFundingFee",
    values: [string, string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradingFee",
    values: [string, string, string, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUtilisationRatio",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFundingRateMultiplier",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFundingRate",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validateDecreasePosition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validateIncreasePosition",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "fundingRateMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "future", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIncreaseFundingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaintanenceMarginRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPairKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPositionFundingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUtilisationRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFundingRateMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFundingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateDecreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateIncreasePosition",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class FutureUtil extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FutureUtilInterface;

  functions: {
    fundingRateMultiplier(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    future(overrides?: CallOverrides): Promise<[string]>;

    getAccountKey(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getIncreaseFundingFee(
      _collateralToken: string,
      _indexToken: string,
      arg2: string,
      _isLong: boolean,
      _notionalDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMaintanenceMarginRatio(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { marginRatio: BigNumber }>;

    getPairKey(
      _collateralToken: string,
      _indexToken: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPositionFundingFee(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTradingFee(
      _collateralToken: string,
      _indexToken: string,
      arg2: string,
      arg3: boolean,
      _notionalDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUtilisationRatio(
      _collateralToken: string,
      _indexToken: string,
      _longSizeDelta: BigNumberish,
      _shortSizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFundingRateMultiplier(
      _collateralToken: string,
      _indexToken: string,
      _multiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFundingRate(
      _collateralToken: string,
      _indexToken: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      _longSizeDelta: BigNumberish,
      _shortSizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
    >;

    validateDecreasePosition(overrides?: CallOverrides): Promise<[void]>;

    validateIncreasePosition(overrides?: CallOverrides): Promise<[void]>;
  };

  fundingRateMultiplier(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  future(overrides?: CallOverrides): Promise<string>;

  getAccountKey(
    _collateralToken: string,
    _indexToken: string,
    _account: string,
    _isLong: boolean,
    overrides?: CallOverrides
  ): Promise<string>;

  getIncreaseFundingFee(
    _collateralToken: string,
    _indexToken: string,
    arg2: string,
    _isLong: boolean,
    _notionalDelta: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMaintanenceMarginRatio(
    _collateralToken: string,
    _indexToken: string,
    _account: string,
    _isLong: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPairKey(
    _collateralToken: string,
    _indexToken: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getPositionFundingFee(
    _collateralToken: string,
    _indexToken: string,
    _account: string,
    _isLong: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTradingFee(
    _collateralToken: string,
    _indexToken: string,
    arg2: string,
    arg3: boolean,
    _notionalDelta: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUtilisationRatio(
    _collateralToken: string,
    _indexToken: string,
    _longSizeDelta: BigNumberish,
    _shortSizeDelta: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFundingRateMultiplier(
    _collateralToken: string,
    _indexToken: string,
    _multiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFundingRate(
    _collateralToken: string,
    _indexToken: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    _longSizeDelta: BigNumberish,
    _shortSizeDelta: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

  validateDecreasePosition(overrides?: CallOverrides): Promise<void>;

  validateIncreasePosition(overrides?: CallOverrides): Promise<void>;

  callStatic: {
    fundingRateMultiplier(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    future(overrides?: CallOverrides): Promise<string>;

    getAccountKey(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    getIncreaseFundingFee(
      _collateralToken: string,
      _indexToken: string,
      arg2: string,
      _isLong: boolean,
      _notionalDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaintanenceMarginRatio(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPairKey(
      _collateralToken: string,
      _indexToken: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getPositionFundingFee(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradingFee(
      _collateralToken: string,
      _indexToken: string,
      arg2: string,
      arg3: boolean,
      _notionalDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUtilisationRatio(
      _collateralToken: string,
      _indexToken: string,
      _longSizeDelta: BigNumberish,
      _shortSizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setFundingRateMultiplier(
      _collateralToken: string,
      _indexToken: string,
      _multiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFundingRate(
      _collateralToken: string,
      _indexToken: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      _longSizeDelta: BigNumberish,
      _shortSizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
    >;

    validateDecreasePosition(overrides?: CallOverrides): Promise<void>;

    validateIncreasePosition(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    fundingRateMultiplier(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    future(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountKey(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIncreaseFundingFee(
      _collateralToken: string,
      _indexToken: string,
      arg2: string,
      _isLong: boolean,
      _notionalDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaintanenceMarginRatio(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPairKey(
      _collateralToken: string,
      _indexToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionFundingFee(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradingFee(
      _collateralToken: string,
      _indexToken: string,
      arg2: string,
      arg3: boolean,
      _notionalDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUtilisationRatio(
      _collateralToken: string,
      _indexToken: string,
      _longSizeDelta: BigNumberish,
      _shortSizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFundingRateMultiplier(
      _collateralToken: string,
      _indexToken: string,
      _multiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFundingRate(
      _collateralToken: string,
      _indexToken: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      _longSizeDelta: BigNumberish,
      _shortSizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateDecreasePosition(overrides?: CallOverrides): Promise<BigNumber>;

    validateIncreasePosition(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    fundingRateMultiplier(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    future(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccountKey(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIncreaseFundingFee(
      _collateralToken: string,
      _indexToken: string,
      arg2: string,
      _isLong: boolean,
      _notionalDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaintanenceMarginRatio(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPairKey(
      _collateralToken: string,
      _indexToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionFundingFee(
      _collateralToken: string,
      _indexToken: string,
      _account: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTradingFee(
      _collateralToken: string,
      _indexToken: string,
      arg2: string,
      arg3: boolean,
      _notionalDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUtilisationRatio(
      _collateralToken: string,
      _indexToken: string,
      _longSizeDelta: BigNumberish,
      _shortSizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFundingRateMultiplier(
      _collateralToken: string,
      _indexToken: string,
      _multiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFundingRate(
      _collateralToken: string,
      _indexToken: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      _longSizeDelta: BigNumberish,
      _shortSizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateDecreasePosition(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateIncreasePosition(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
